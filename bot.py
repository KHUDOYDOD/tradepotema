import os
import requests
import logging
import time
import datetime
import pytz
import random
import json
from utils import format_error_for_display
from models import Post
from app import db

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Environment configuration
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
# Check and correct CHANNEL_ID format
_channel_id = os.environ.get('CHANNEL_ID', '@tradepotrest')
# Remove Cyrillic characters that may cause problems
import re
_channel_id = re.sub(r'[^a-zA-Z0-9_@]', '', _channel_id)
# Add @ if it's not at the beginning
if _channel_id and not _channel_id.startswith('@'):
    _channel_id = '@' + _channel_id
CHANNEL_ID = _channel_id
OPENROUTER_API_KEY = os.environ.get('OPENROUTER_API_KEY')

# Constants
MAX_RETRIES = 3
RETRY_DELAY = 5  # seconds
TIMEZONE = pytz.timezone('Asia/Dushanbe')

# Post history is stored in database, this is only for temporary caching
post_history = []

# –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
TRADING_TOPICS_BY_CATEGORY = {
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑": [
        "üîÆ –§–∏–≥—É—Ä—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: –∫–∞–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä—ã–Ω–æ–∫",
        "üìà –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è—Ö",
        "üìä –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ: –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞",
        "üéØ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏: —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        "üßÆ –§–∏–±–æ–Ω–∞—á—á–∏ –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ: —É—Ä–æ–≤–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è",
        "üïØÔ∏è –ü–∞—Ç—Ç–µ—Ä–Ω—ã —è–ø–æ–Ω—Å–∫–∏—Ö —Å–≤–µ—á–µ–π: —á—Ç–æ –æ–Ω–∏ –≥–æ–≤–æ—Ä—è—Ç –æ —Ä—ã–Ω–æ—á–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏",
        "üìã –ö–∞–∫ —á–∏—Ç–∞—Ç—å –ª–µ–Ω—Ç—É —Å–¥–µ–ª–æ–∫ –∏ —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫: —Ç–∞–∫—Ç–∏–∫–∏ –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏",
        "üìâ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä RSI: –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã",
        "üîÑ –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ: –ø–æ–∏—Å–∫ —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤",
        "üåä –í–æ–ª–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑ –≠–ª–ª–∏–æ—Ç—Ç–∞: –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ä—ã–Ω–∫–∞"
    ],
    "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑": [
        "üìë –ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏: –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ —Ç—Ä–µ–π–¥–µ—Ä—É",
        "üåç –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–∫–∏: –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç—Ä–µ–π–¥–µ—Ä–∞",
        "üè≠ –û—Ç—Ä–∞—Å–ª–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑: –∫–∞–∫ –≤—ã–±–∏—Ä–∞—Ç—å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π",
        "üíπ –ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã –≤ –æ—Ü–µ–Ω–∫–µ –∞–∫—Ü–∏–π: P/E, P/B, EV/EBITDA –∏ –¥—Ä—É–≥–∏–µ",
        "üì¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: –∫–∞–∫ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—è—Ö, –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö –∏ —Å–ø–ª–∏—Ç–∞—Ö",
        "üí≤ –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∞–∫—Ç–∏–≤–æ–≤",
        "üåê –ì–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∏ –∏—Ö –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä—ã–Ω–∫–∏",
        "ü¶æ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π",
        "üë®‚Äçüíº –ò–Ω—Å–∞–π–¥–µ—Ä—Å–∫–∏–µ —Å–¥–µ–ª–∫–∏: –∫–∞–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–π",
        "üíµ –î–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    ],
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞": [
        "üß† –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞: –∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç—Ä–∞—Ö–æ–º –∏ –∂–∞–¥–Ω–æ—Å—Ç—å—é",
        "üé≠ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ª–æ–≤—É—à–∫–∏ –Ω–∞ —Ä—ã–Ω–∫–µ: –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π",
        "‚öì –†–∞–∑–≤–∏—Ç–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: –∫–∞–∫ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–º—É –ø–ª–∞–Ω—É –≤ –ª—é–±—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö",
        "üßò‚Äç‚ôÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º: —Ç–µ—Ö–Ω–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—Å–Ω–æ—Å—Ç–∏ –º—ã—à–ª–µ–Ω–∏—è –≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã",
        "‚ùå –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —É–±—ã—Ç–∫–æ–≤: –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏",
        "üí° –ú–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: –º—ã—à–ª–µ–Ω–∏–µ –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö",
        "‚ö° –ò–º–ø—É–ª—å—Å–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è: –ø—Ä–∏—á–∏–Ω—ã –∏ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è",
        "‚öñÔ∏è –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: –∫–æ–≥–¥–∞ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Ä–∏—Å–∫",
        "üò± –°–∏–Ω–¥—Ä–æ–º —É–ø—É—â–µ–Ω–Ω–æ–π –≤—ã–≥–æ–¥—ã (FOMO): –∫–∞–∫ —Å –Ω–∏–º –±–æ—Ä–æ—Ç—å—Å—è",
        "üõ°Ô∏è –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏: –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤"
    ],
    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏": [
        "üìè –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–∞–π–∑–∏–Ω–≥: –º–µ—Ç–æ–¥—ã —Ä–∞—Å—á–µ—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏",
        "üö´ –°—Ç–æ–ø-–ª–æ—Å—Å—ã –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã: —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏",
        "üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–æ–≤: –∫–∞–∫ —Å—Ç—Ä–æ–∏—Ç—å –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å",
        "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é: —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π",
        "üßÆ –†–∞—Å—á–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è: –æ—Ü–µ–Ω–∫–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏",
        "üõ°Ô∏è –•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π: –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∏ –∑–∞—â–∏—Ç—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è",
        "‚õìÔ∏è –ö–∞—Å–∫–∞–¥–Ω—ã–µ —Å—Ç–æ–ø-–ø—Ä–∏–∫–∞–∑—ã: –∑–∞—â–∏—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–∏ —Å–∏–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö",
        "üí∏ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ø—Ä–∏ —Ç–æ—Ä–≥–æ–≤–ª–µ —Å –ø–ª–µ—á–æ–º: –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞",
        "üîÑ –ê–Ω—Ç–∏—Ñ—Ä–∞–≥–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ä—ã–Ω–∫–∞",
        "üß™ –°—Ü–µ–Ω–∞—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
    ],
    "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã": [
        "üñºÔ∏è NFT-—Ä—ã–Ω–æ–∫: —Ç—Ä–µ–Ω–¥—ã, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ä–∏—Å–∫–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤",
        "üè¶ DeFi-–ø—Ä–æ—Ç–æ–∫–æ–ª—ã: —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–∞—Ö",
        "‚Çø –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–∏—Ç–∫–æ–∏–Ω–∞: –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏",
        "‚õìÔ∏è –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫—á–µ–π–Ω-–º–µ—Ç—Ä–∏–∫: on-chain –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤",
        "ü™ô –ê–ª—å—Ç–∫–æ–∏–Ω—ã: –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –æ—Ç–±–æ—Ä–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤",
        "üí± –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤: –∫–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
        "üì± –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–ø—Ä–æ–µ–∫—Ç–æ–≤: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ?",
        "üîÑ –¶–∏–∫–ª—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞: –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ñ–∞–∑—ã –∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∏–º–∏",
        "‚õèÔ∏è –ú–∞–π–Ω–∏–Ω–≥ –∏ —Å—Ç–µ–π–∫–∏–Ω–≥: –ø–∞—Å—Å–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ",
        "üêã –ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –≤ –∫—Ä–∏–ø—Ç–µ: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–∏—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ –∏—Ö –≤–ª–∏—è–Ω–∏—è"
    ]
}

# –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã —Å —ç–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
EMOTIONAL_TOPICS_BY_CATEGORY = {
    "–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ": [
        "üî• –ö–∞–∫ —Ä–∞–∑–æ–≥–Ω–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç: —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞",
        "üí∞ –°–µ–∫—Ä–µ—Ç—ã –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–≤: –∫–∞–∫ –º—ã—Å–ª—è—Ç —É—Å–ø–µ—à–Ω—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã",
        "üöÄ –û—Ç –Ω–æ–≤–∏—á–∫–∞ –¥–æ –ø—Ä–æ—Ñ–∏: –ø—É—Ç—å —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞ –∑–∞ 12 –º–µ—Å—è—Ü–µ–≤",
        "‚ö° –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –±–æ–≥–∞—Ç—Å—Ç–≤–∞: –∫–∞–∫ –º—ã—Å–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø—Ä–∏–±—ã–ª–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
        "üíé –¢—Ä–µ–π–¥–∏–Ω–≥ –∫–∞–∫ —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏: –ø—É—Ç—å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
        "üèÜ 10 –ø—Ä–∏–≤—ã—á–µ–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è—é—Ç –∏–≥—Ä—É",
        "üí™ –ö–∞–∫ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å —Å—Ç—Ä–∞—Ö –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–º–µ–ª—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è",
        "‚ú® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞: –º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏",
        "üîÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É–¥—å–±–æ–π: –∫–∞–∫ —Ç—Ä–µ–π–¥–∏–Ω–≥ –º–µ–Ω—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é",
        "‚≠ê –§–æ—Ä–º—É–ª–∞ –ª–∏—á–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –∫–∞–∫ –¥–æ—Å—Ç–∏—á—å –±–æ–ª—å—à–µ–≥–æ, —Ç–æ—Ä–≥—É—è –º–µ–Ω—å—à–µ"
    ],
    "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ": [
        "üìö –§—É–Ω–¥–∞–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞: 7 –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤, –æ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–ª—á–∞—Ç –≥—É—Ä—É",
        "üß† –ù–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Ç—Ä–µ–π–¥–µ—Ä–∞: –∫–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–æ–∑–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞",
        "üìä –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –Ω—É–ª—è",
        "üîç –°–∫—Ä—ã—Ç—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä—ã–Ω–∫–∞: –Ω–∞ —á—Ç–æ —Å–º–æ—Ç—Ä—è—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã",
        "üìù –¢–æ—Ä–≥–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª –º–∞—Å—Ç–µ—Ä–∞: –∫–∞–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–¥–µ–ª–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
        "üì± –ú–æ–±–∏–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥: –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        "üéì –ê–∫–∞–¥–µ–º–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞: –æ—Ç —Ç–µ–æ—Ä–∏–∏ –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ",
        "üíª –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏: —Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ –Ω–∞–≤—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
        "üîé –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞: –º–µ—Ç–æ–¥—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤",
        "üìå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞: –∫–∞–∫ –≤—ã–±–∏—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Å–¥–µ–ª–∫–∏"
    ],
    "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ": [
        "üìà –ú–µ–∂—Ä—ã–Ω–æ—á–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∞–Ω–∞–ª–∏–∑—É –∞–∫—Ç–∏–≤–æ–≤",
        "üìâ –¶–∏–∫–ª—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö",
        "üßÆ –ö–≤–∞–Ω—Ç–∏—Ç–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ",
        "üß© –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä—ã–Ω–∫–∞: –∫–∞–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å",
        "üìä –û–±—ä–µ–º–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –∞–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: –≤–∑–≥–ª—è–¥ –≤ –≥–ª—É–±–∏–Ω—É —Ä—ã–Ω–∫–∞",
        "üî¢ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–æ–º–µ–Ω—Ç—É–º–∞: —Å–∏–Ω–µ—Ä–≥–∏—è –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ",
        "üì° –†—ã–Ω–æ—á–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏: –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏",
        "üìë –§–∞–∫—Ç–æ—Ä–Ω–æ–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–æ–±–∞—Å—Ç–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
        "üî¨ –ú–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞: –∞–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–±—É–∫–∞ –∏ –ø–æ—Ç–æ–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤",
        "üìã –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö: —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ"
    ],
    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–µ": [
        "‚ö†Ô∏è –°–∫—Ä—ã—Ç—ã–µ —Ä–∏—Å–∫–∏ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: —á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –∫–∞–∂–¥–æ–º—É",
        "üõë –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ª–æ–≤—É—à–∫–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞: –∫–∞–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –≤—Å—ë",
        "‚õî –ú–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –Ω–∞ —Ä—ã–Ω–∫–µ: –∫–∞–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ –∑–∞—â–∏—Ç–∏—Ç—å—Å—è",
        "üî¥ Burnout —Ç—Ä–µ–π–¥–µ—Ä–∞: –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è",
        "üö® –¢—Ä–µ–≤–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Ä—ã–Ω–∫–∞: –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–≥–æ—Å—è –∫—Ä–∞—Ö–∞",
        "‚è∞ –¢–∞–π–º-–∫–∏–ª–ª–µ—Ä—ã —Ç—Ä–µ–π–¥–µ—Ä–∞: –∫–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —Ç–µ—Ä—è—Ç—å –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å–≥–∏",
        "üßØ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Ä—ã –ø—Ä–∏ –æ–±–≤–∞–ª–µ —Ä—ã–Ω–∫–∞: –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π",
        "üöß –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞: —á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏",
        "üîí –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: –∑–∞—â–∏—Ç–∞ —Å—á–µ—Ç–æ–≤ –∏ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        "üì£ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–µ –∑–Ω–∞–∫–∏ –ø–µ—Ä–µ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞: –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è"
    ]
}

# –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ —Ç–µ–º—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
TRADING_TOPICS = []
for category, topics in TRADING_TOPICS_BY_CATEGORY.items():
    TRADING_TOPICS.extend(topics)
for category, topics in EMOTIONAL_TOPICS_BY_CATEGORY.items():
    TRADING_TOPICS.extend(topics)

# Trading-related images by category - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–º–∞–º –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
TRADING_IMAGES = {
    "charts": [
        "https://images.unsplash.com/photo-1535320903710-d993d3d77d29",
        "https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3",
        "https://images.unsplash.com/photo-1548094878-84ced0f6896d",
        "https://images.unsplash.com/photo-1543286386-713bdd548da4",
        "https://images.unsplash.com/photo-1569025690938-a00729c9e1f9"
    ],
    "crypto": [
        "https://images.unsplash.com/photo-1518546305927-5a555bb7020d",
        "https://images.unsplash.com/photo-1516245834210-c4c142787335",
        "https://images.unsplash.com/photo-1590283603385-17ffb3a7f29f",
        "https://images.unsplash.com/photo-1622630998477-20aa696ecb05",
        "https://images.unsplash.com/photo-1625217527288-83595e7214c8"
    ],
    "stocks": [
        "https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3",
        "https://images.unsplash.com/photo-1559526324-593bc073d938",
        "https://images.unsplash.com/photo-1526304640581-d334cdbbf45e",
        "https://images.unsplash.com/photo-1560221328-12fe60f83ab8"
    ],
    "trading_setup": [
        "https://images.unsplash.com/photo-1551288049-bebda4e38f71",
        "https://images.unsplash.com/photo-1611174743420-3d7df880ce32",
        "https://images.unsplash.com/photo-1461773518188-b3e86f98242f",
        "https://images.unsplash.com/photo-1593062096033-9a26b09da705",
        "https://images.unsplash.com/photo-1507679799987-c73779587ccf"
    ],
    "business": [
        "https://images.unsplash.com/photo-1460925895917-afdab827c52f",
        "https://images.unsplash.com/photo-1591696205602-2f950c417cb9",
        "https://images.unsplash.com/photo-1579532537598-459ecdaf39cc",
        "https://images.unsplash.com/photo-1553729459-efe14ef6055d",
        "https://images.unsplash.com/photo-1444653614773-995cb1ef9efa"
    ],
    "motivation": [
        "https://images.unsplash.com/photo-1492366254240-43affaefc3e3",
        "https://images.unsplash.com/photo-1504805572947-34fad45aed93",
        "https://images.unsplash.com/photo-1486406146926-c627a92ad1ab",
        "https://images.unsplash.com/photo-1519834022362-8c5d61c9c64b",
        "https://images.unsplash.com/photo-1507936580189-3816b4656daa"
    ]
}

def generate_post_text(prompt=None):
    """Generate text content using OpenRouter's GPT-4 or Claude"""
    try:
        if not OPENROUTER_API_KEY:
            logger.error("OpenRouter API key is not set")
            # Create diverse fallback text based on the topic
            fallback_texts = [
                "üöÄ –¢—Ä–µ–π–¥–∏–Ω–≥ - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ –±–∞–ª–∞–Ω—Å–∞ –∏ —Ç–µ—Ä–ø–µ–Ω–∏—è! –ö–∞–∂–¥–∞—è —Å–¥–µ–ª–∫–∞ —É—á–∏—Ç –Ω–∞—Å —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É. –ü–æ–º–Ω–∏—Ç–µ: –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ. #—Ç—Ä–µ–π–¥–∏–Ω–≥ #–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ #tradepo",
                "üíπ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä—ã–Ω–∫–∏ –Ω–µ –ø—Ä–æ—â–∞—é—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –£—Å–ø–µ—à–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä - —ç—Ç–æ —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω—ã–π —Å—Ç—Ä–∞—Ç–µ–≥ —Å —á–µ—Ç–∫–∏–º –ø–ª–∞–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–π! #–±–∏—Ä–∂–∞ #–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ #tradepo",
                "üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ - –≤–∞—à –ª—É—á—à–∏–π –¥—Ä—É–≥ –Ω–∞ —Ä—ã–Ω–∫–µ! –£—á–∏—Ç–µ—Å—å —á–∏—Ç–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–¥–µ—Ç—å —Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ —É–ø—É—Å–∫–∞—é—Ç –∏–∑ –≤–∏–¥—É. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! #—Ç—Ä–µ–π–¥–∏–Ω–≥ #–≥—Ä–∞—Ñ–∏–∫–∏ #tradepo",
                "üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø—Ä–µ–∂–¥–µ, —á–µ–º –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏. –°–∞–º–æ–µ –≤—ã–≥–æ–¥–Ω–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ - –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ! #–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ #—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ #tradepo",
                "‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –Ω–µ –≤—Ä–∞–≥, –∞ –¥—Ä—É–≥ —Ç—Ä–µ–π–¥–µ—Ä–∞! –ò–º–µ–Ω–Ω–æ –≤ –ø–µ—Ä–∏–æ–¥—ã –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–æ–∂–¥–∞—é—Ç—Å—è —Å–∞–º—ã–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã! #—Ç—Ä–µ–π–¥–∏–Ω–≥ #–ø—Ä–∏–±—ã–ª—å #tradepo",
                "üî• –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ —Å—Ç—Ä–æ–≥–æ–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ - –¥–≤–∞ —Å—Ç–æ–ª–ø–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞. –ë–µ–∑ –Ω–∏—Ö –¥–∞–∂–µ –ª—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±—Ä–µ—á–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–∞–ª! #—Ç—Ä–µ–π–¥–∏–Ω–≥ #—Ä–∏—Å–∫–∏ #tradepo"
            ]
            
            # Choose text based on prompt
            if prompt:
                # Use simple hash function to select text based on prompt
                index = sum(ord(c) for c in prompt) % len(fallback_texts)
                return fallback_texts[index]
            else:
                return random.choice(fallback_texts)
            
        headers = {
            "HTTP-Referer": "https://replit.com",  # Add referer for OpenRouter
            "X-Title": "TRADEPO Bot",
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }
        
        # Expand prompt to make it more substantial
        user_prompt = prompt
        # Add context to request for diverse content
        current_time = datetime.datetime.now()
        content_request = f"–ù–∞–ø–∏—à–∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–æ—Å—Ç –æ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ –Ω–∞ —Ç–µ–º—É: {user_prompt}"
        content_request += "\n\n–î–æ–±–∞–≤—å –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å —Å —ç–º–æ–¥–∂–∏."
        content_request += "\n\n–í–∫–ª—é—á–∏ —Ö—ç—à—Ç–µ–≥–∏ #—Ç—Ä–µ–π–¥–∏–Ω–≥ #–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ #—Ñ–∏–Ω–∞–Ω—Å—ã #tradepo –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞."
        content_request += f"\n\n–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–µ –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ—Å—Ç—ã. –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_time.strftime('%d.%m.%Y')}."
            
        data = {
            "model": "anthropic/claude-3-haiku",  # Use more accessible model
            "messages": [
                {"role": "system", "content": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –¢–≤–æ–π —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞ - –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π. –°–æ–∑–¥–∞–≤–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç."},
                {"role": "user", "content": content_request}
            ],
            "max_tokens": 250,  # Increase for more detailed content
            "temperature": 0.9  # Increase for more variety
        }
        
        for attempt in range(MAX_RETRIES):
            try:
                logger.info(f"Generating text, attempt {attempt+1}")
                response = requests.post(
                    "https://openrouter.ai/api/v1/chat/completions", 
                    headers=headers, 
                    json=data,
                    timeout=30
                )
                response.raise_for_status()
                
                # More robust response handling
                response_data = response.json()
                logger.debug(f"API response: {response_data}")
                
                # Check response format
                if 'choices' in response_data and len(response_data['choices']) > 0:
                    if 'message' in response_data['choices'][0] and 'content' in response_data['choices'][0]['message']:
                        text = response_data['choices'][0]['message']['content']
                    else:
                        # Fallback if structure is different
                        logger.warning("Unexpected response structure (no message/content)")
                        if 'text' in response_data:
                            text = response_data['text']
                        else:
                            raise KeyError("No recognizable text content in response")
                elif 'error' in response_data:
                    # Handle API error
                    error_message = response_data.get('error', {}).get('message', 'Unknown API error')
                    logger.error(f"API error: {error_message}")
                    raise KeyError(f"API error: {error_message}")
                else:
                    # If no choices field, use fallback
                    logger.warning("No 'choices' field in response, trying fallback extraction")
                    # Try to get text from arbitrary field
                    if 'output' in response_data:
                        text = response_data['output']
                    elif 'generated_text' in response_data:
                        text = response_data['generated_text']
                    else:
                        raise KeyError("Could not extract text from response")
                
                # Remove any markdown syntax that might be present
                text = text.replace('```', '').strip()
                
                logger.info(f"Generated text: {text[:50]}...")
                return text
                
            except Exception as e:
                logger.error(f"Error in text generation attempt {attempt+1}: {e}")
                if attempt < MAX_RETRIES - 1:
                    time.sleep(RETRY_DELAY)
                else:
                    # If all retries failed, return error
                    raise Exception(f"Failed to generate text after {MAX_RETRIES} attempts: {str(e)}")
                    
    except Exception as e:
        logger.error(f"Error in generate_post_text: {e}")
        # Return simple fallback text
        return f"üìä –í–∞–∂–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä—ã–Ω–æ–∫ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–æ–π –∏ —Å–ª–µ–¥—É–π—Ç–µ —Å–≤–æ–µ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É –ø–ª–∞–Ω—É. –£—Å–ø–µ—à–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥ —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ! #{prompt.replace(' ', '')} #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo"

def get_image_url_by_theme(theme="", emotion="motivational"):
    """Get an image URL that matches the post theme
    
    Args:
        theme (str): –¢–µ–º–∞ –ø–æ—Å—Ç–∞
        emotion (str): –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω –ø–æ—Å—Ç–∞
    
    Returns:
        str: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    # Try to get image from custom image list first
    custom_image = get_image_from_file()
    if custom_image:
        return custom_image
    
    # Determine best category based on theme keywords
    theme_lower = theme.lower() if theme else ""
    
    # Keywords that indicate which category to use
    category_keywords = {
        "charts": ["–≥—Ä–∞—Ñ–∏–∫", "—Ç—Ä–µ–Ω–¥", "–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π", "–∞–Ω–∞–ª–∏–∑", "—Å–≤–µ—á–∏", "–ø–∞—Ç—Ç–µ—Ä–Ω", "—Ñ–∏–≥—É—Ä—ã"],
        "crypto": ["–∫—Ä–∏–ø—Ç–æ", "–±–∏—Ç–∫–æ–∏–Ω", "–∞–ª—å—Ç–∫–æ–∏–Ω", "nft", "–±–ª–æ–∫—á–µ–π–Ω", "—Ç–æ–∫–µ–Ω", "–º–∞–π–Ω–∏–Ω–≥", "—Å—Ç–µ–π–∫–∏–Ω–≥"],
        "stocks": ["–∞–∫—Ü–∏–∏", "—Ñ–æ–Ω–¥–æ–≤—ã–π", "—Ü–µ–Ω–Ω—ã–µ –±—É–º–∞–≥–∏", "–¥–∏–≤–∏–¥–µ–Ω–¥—ã", "–æ–ø—Ü–∏–æ–Ω", "—Ñ—å—é—á–µ—Ä—Å", "–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω"],
        "trading_setup": ["—Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ", "—Ç–µ—Ä–º–∏–Ω–∞–ª", "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", "—Å–∫–∞–ª—å–ø–∏–Ω–≥", "–¥–µ–π—Ç—Ä–µ–π–¥–∏–Ω–≥"],
        "business": ["–±–∏–∑–Ω–µ—Å", "–∫–∞—Ä—å–µ—Ä–∞", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–¥–æ—Ö–æ–¥", "–∫–∞–ø–∏—Ç–∞–ª", "–ø–æ—Ä—Ç—Ñ–µ–ª—å"],
        "motivation": ["–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "—É—Å–ø–µ—Ö", "–º–æ—Ç–∏–≤–∞—Ü–∏—è", "–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", "–º—ã—à–ª–µ–Ω–∏–µ", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è"]
    }
    
    # Check for keywords in theme
    matching_categories = []
    for category, keywords in category_keywords.items():
        for keyword in keywords:
            if keyword in theme_lower:
                matching_categories.append(category)
                break
    
    # Map emotion to image category if no matching keywords found
    emotion_to_category = {
        "motivational": ["motivation", "business"],
        "educational": ["charts", "trading_setup"],
        "analytical": ["charts", "stocks"],
        "cautionary": ["stocks", "business"]
    }
    
    # If no matching categories, use emotion mapping or default to charts
    if not matching_categories:
        emotion_categories = emotion_to_category.get(emotion, ["charts"])
        category = random.choice(emotion_categories)
    else:
        category = random.choice(matching_categories)
    
    # Get images for the category
    category_images = TRADING_IMAGES.get(category, TRADING_IMAGES["charts"])
    
    # Return a random image from the category
    return random.choice(category_images)

def get_image_from_file():
    """Get a random image URL from the image_urls.txt file"""
    try:
        if os.path.exists('image_urls.txt'):
            with open('image_urls.txt', 'r', encoding='utf-8') as f:
                urls = [line.strip() for line in f.readlines() if line.strip()]
                
            if urls:
                return random.choice(urls)
                
    except Exception as e:
        logger.error(f"Error getting image URL from file: {e}")
        
    # Return None if no custom image is available
    return None

def send_telegram_message(text, image_url=None):
    """Send message to Telegram channel"""
    if not TELEGRAM_TOKEN:
        logger.error("Telegram token is not set")
        return False, "Telegram token is not set"
        
    if not CHANNEL_ID:
        logger.error("Channel ID is not set")
        return False, "Channel ID is not set"
        
    try:
        api_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/"
        
        if image_url:
            # Send photo with caption
            endpoint = api_url + "sendPhoto"
            data = {
                "chat_id": CHANNEL_ID,
                "photo": image_url,
                "caption": text,
                "parse_mode": "HTML"
            }
        else:
            # Send text message
            endpoint = api_url + "sendMessage"
            data = {
                "chat_id": CHANNEL_ID,
                "text": text,
                "parse_mode": "HTML"
            }
            
        for attempt in range(MAX_RETRIES):
            try:
                logger.info(f"Sending message to Telegram, attempt {attempt+1}")
                response = requests.post(endpoint, data=data, timeout=30)
                response.raise_for_status()
                
                response_data = response.json()
                logger.debug(f"Telegram API response: {response_data}")
                
                if response_data.get('ok', False):
                    message_id = response_data.get('result', {}).get('message_id', None)
                    logger.info(f"Message sent successfully, message_id: {message_id}")
                    return True, message_id
                else:
                    error_description = response_data.get('description', 'Unknown error')
                    logger.error(f"Telegram API error: {error_description}")
                    return False, error_description
                    
            except Exception as e:
                logger.error(f"Error in send attempt {attempt+1}: {e}")
                if attempt < MAX_RETRIES - 1:
                    time.sleep(RETRY_DELAY)
                else:
                    # If all retries failed
                    return False, f"Failed to send message after {MAX_RETRIES} attempts: {str(e)}"
                    
    except Exception as e:
        logger.error(f"Error in send_telegram_message: {e}")
        return False, str(e)

def create_and_send_post(theme, emotion="motivational"):
    """Create and send a post to the Telegram channel
    
    Args:
        theme (str): –¢–µ–º–∞ –ø–æ—Å—Ç–∞
        emotion (str, optional): –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω (motivational, educational, analytical, cautionary)
    """
    start_time = time.time()
    success = False
    text = None
    image_url = None
    result = None
    error = None
    
    try:
        logger.info(f"Creating post with theme: {theme}, emotion: {emotion}")
        
        # Generate text for the post using the specified emotion
        text = generate_post_text(theme)
        
        # Get thematically relevant image URL based on the post content
        image_url = get_image_url_by_theme(theme, emotion)
        
        # Send message to Telegram
        success, result = send_telegram_message(text, image_url)
        
        # Calculate processing time
        processing_time = f"{time.time() - start_time:.2f}s"
        
        # Save post to database
        try:
            # Create a snippet for display
            text_snippet = text[:200] + "..." if text and len(text) > 200 else text
            
            # Create new post record
            post = Post(
                theme=theme,
                text_snippet=text_snippet,
                full_text=text,
                image_url=image_url,
                success=success,
                message_id=result if success else None,
                error=result if not success else None,
                processing_time=processing_time
            )
            
            # Add to database
            db.session.add(post)
            db.session.commit()
            
            # Add to in-memory cache
            post_dict = post.to_dict()
            post_history.insert(0, post_dict)
            
            # Keep only last 100 posts in memory
            if len(post_history) > 100:
                post_history.pop()
                
            logger.info(f"Post saved to database with ID: {post.id}")
            
        except Exception as db_error:
            logger.error(f"Error saving post to database: {db_error}")
            error = f"Database error: {str(db_error)}"
            
        return success, text, image_url, result
        
    except Exception as e:
        logger.error(f"Error in create_and_send_post: {e}")
        error_message = format_error_for_display(e)
        
        # Try to save error to database
        try:
            processing_time = f"{time.time() - start_time:.2f}s"
            
            post = Post(
                theme=theme,
                text_snippet=text[:200] + "..." if text and len(text) > 200 else text,
                full_text=text,
                image_url=image_url,
                success=False,
                error=error_message,
                processing_time=processing_time
            )
            
            db.session.add(post)
            db.session.commit()
            
            post_dict = post.to_dict()
            post_history.insert(0, post_dict)
            
            if len(post_history) > 100:
                post_history.pop()
                
        except Exception as db_error:
            logger.error(f"Error saving error to database: {db_error}")
            
        return False, text, image_url, error_message

def get_post_history(limit=20):
    """Return post history from database
    Returns the most recent posts from the database, or in-memory history as fallback
    """
    try:
        # Try to get posts from database
        posts = Post.query.order_by(Post.timestamp.desc()).limit(limit).all()
        
        if posts:
            return [post.to_dict() for post in posts]
        
        # If no posts in database, use in-memory history
        return post_history[:limit] if post_history else []
        
    except Exception as e:
        logger.error(f"Error getting post history: {e}")
        # Fallback to in-memory history on database error
        return post_history[:limit] if post_history else []

def get_random_topic():
    """Get a random topic for post generation that wasn't used recently"""
    try:
        # Load custom topics if they exist
        custom_topics = []
        try:
            if os.path.exists('custom_topics.txt'):
                with open('custom_topics.txt', 'r', encoding='utf-8') as f:
                    custom_topics = [line.strip() for line in f.readlines() if line.strip()]
        except Exception as e:
            logger.error(f"Error loading custom topics: {e}")
        
        # Combine built-in and custom topics
        all_topics = TRADING_TOPICS + custom_topics
        
        # Get recent post themes to avoid repetition
        recent_posts = get_post_history(10)
        recent_themes = [post.get('theme') for post in recent_posts if post.get('theme')]
        
        # Filter out recently used topics
        available_topics = [topic for topic in all_topics if topic not in recent_themes]
        
        # If all topics were used recently, use the full list
        if not available_topics:
            available_topics = all_topics
        
        # Select a random topic
        selected_topic = random.choice(available_topics)
        logger.info(f"Selected random topic: {selected_topic}")
        
        return selected_topic
    
    except Exception as e:
        logger.error(f"Error getting random topic: {e}")
        # Fallback to simple random choice from built-in topics
        return random.choice(TRADING_TOPICS)