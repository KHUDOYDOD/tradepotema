import os
import requests
import logging
import time
import datetime
import pytz
import random
import json
from utils import format_error_for_display
from models import Post
from app import db

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Environment configuration
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
# Check and correct CHANNEL_ID format
_channel_id = os.environ.get('CHANNEL_ID', '@tradepotrest')
# Remove Cyrillic characters that may cause problems
import re
_channel_id = re.sub(r'[^a-zA-Z0-9_@]', '', _channel_id)
# Add @ if it's not at the beginning
if _channel_id and not _channel_id.startswith('@'):
    _channel_id = '@' + _channel_id
CHANNEL_ID = _channel_id
OPENROUTER_API_KEY = os.environ.get('OPENROUTER_API_KEY')

# Constants
MAX_RETRIES = 3
RETRY_DELAY = 5  # seconds
TIMEZONE = pytz.timezone('Asia/Dushanbe')

# Post history is stored in database, this is only for temporary caching
post_history = []

# –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
TRADING_TOPICS_BY_CATEGORY = {
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑": [
        "üîÆ –§–∏–≥—É—Ä—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: –∫–∞–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä—ã–Ω–æ–∫",
        "üìà –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è—Ö",
        "üìä –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ: –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞",
        "üéØ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏: —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        "üßÆ –§–∏–±–æ–Ω–∞—á—á–∏ –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ: —É—Ä–æ–≤–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è",
        "üïØÔ∏è –ü–∞—Ç—Ç–µ—Ä–Ω—ã —è–ø–æ–Ω—Å–∫–∏—Ö —Å–≤–µ—á–µ–π: —á—Ç–æ –æ–Ω–∏ –≥–æ–≤–æ—Ä—è—Ç –æ —Ä—ã–Ω–æ—á–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏",
        "üìã –ö–∞–∫ —á–∏—Ç–∞—Ç—å –ª–µ–Ω—Ç—É —Å–¥–µ–ª–æ–∫ –∏ —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫: —Ç–∞–∫—Ç–∏–∫–∏ –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏",
        "üìâ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä RSI: –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã",
        "üîÑ –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ: –ø–æ–∏—Å–∫ —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤",
        "üåä –í–æ–ª–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑ –≠–ª–ª–∏–æ—Ç—Ç–∞: –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ä—ã–Ω–∫–∞"
    ],
    "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑": [
        "üìë –ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏: –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ —Ç—Ä–µ–π–¥–µ—Ä—É",
        "üåç –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–∫–∏: –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç—Ä–µ–π–¥–µ—Ä–∞",
        "üè≠ –û—Ç—Ä–∞—Å–ª–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑: –∫–∞–∫ –≤—ã–±–∏—Ä–∞—Ç—å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π",
        "üíπ –ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã –≤ –æ—Ü–µ–Ω–∫–µ –∞–∫—Ü–∏–π: P/E, P/B, EV/EBITDA –∏ –¥—Ä—É–≥–∏–µ",
        "üì¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: –∫–∞–∫ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—è—Ö, –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö –∏ —Å–ø–ª–∏—Ç–∞—Ö",
        "üí≤ –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∞–∫—Ç–∏–≤–æ–≤",
        "üåê –ì–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∏ –∏—Ö –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä—ã–Ω–∫–∏",
        "ü¶æ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π",
        "üë®‚Äçüíº –ò–Ω—Å–∞–π–¥–µ—Ä—Å–∫–∏–µ —Å–¥–µ–ª–∫–∏: –∫–∞–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–π",
        "üíµ –î–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    ],
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞": [
        "üß† –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞: –∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç—Ä–∞—Ö–æ–º –∏ –∂–∞–¥–Ω–æ—Å—Ç—å—é",
        "üé≠ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ª–æ–≤—É—à–∫–∏ –Ω–∞ —Ä—ã–Ω–∫–µ: –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π",
        "‚öì –†–∞–∑–≤–∏—Ç–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: –∫–∞–∫ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–º—É –ø–ª–∞–Ω—É –≤ –ª—é–±—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö",
        "üßò‚Äç‚ôÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º: —Ç–µ—Ö–Ω–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—Å–Ω–æ—Å—Ç–∏ –º—ã—à–ª–µ–Ω–∏—è –≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã",
        "‚ùå –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —É–±—ã—Ç–∫–æ–≤: –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏",
        "üí° –ú–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: –º—ã—à–ª–µ–Ω–∏–µ –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö",
        "‚ö° –ò–º–ø—É–ª—å—Å–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è: –ø—Ä–∏—á–∏–Ω—ã –∏ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è",
        "‚öñÔ∏è –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: –∫–æ–≥–¥–∞ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Ä–∏—Å–∫",
        "üò± –°–∏–Ω–¥—Ä–æ–º —É–ø—É—â–µ–Ω–Ω–æ–π –≤—ã–≥–æ–¥—ã (FOMO): –∫–∞–∫ —Å –Ω–∏–º –±–æ—Ä–æ—Ç—å—Å—è",
        "üõ°Ô∏è –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏: –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤"
    ],
    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏": [
        "üìè –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–∞–π–∑–∏–Ω–≥: –º–µ—Ç–æ–¥—ã —Ä–∞—Å—á–µ—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏",
        "üö´ –°—Ç–æ–ø-–ª–æ—Å—Å—ã –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã: —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏",
        "üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–æ–≤: –∫–∞–∫ —Å—Ç—Ä–æ–∏—Ç—å –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å",
        "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é: —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π",
        "üßÆ –†–∞—Å—á–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è: –æ—Ü–µ–Ω–∫–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏",
        "üõ°Ô∏è –•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π: –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∏ –∑–∞—â–∏—Ç—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è",
        "‚õìÔ∏è –ö–∞—Å–∫–∞–¥–Ω—ã–µ —Å—Ç–æ–ø-–ø—Ä–∏–∫–∞–∑—ã: –∑–∞—â–∏—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–∏ —Å–∏–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö",
        "üí∏ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ø—Ä–∏ —Ç–æ—Ä–≥–æ–≤–ª–µ —Å –ø–ª–µ—á–æ–º: –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞",
        "üîÑ –ê–Ω—Ç–∏—Ñ—Ä–∞–≥–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ä—ã–Ω–∫–∞",
        "üß™ –°—Ü–µ–Ω–∞—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
    ],
    "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã": [
        "üñºÔ∏è NFT-—Ä—ã–Ω–æ–∫: —Ç—Ä–µ–Ω–¥—ã, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ä–∏—Å–∫–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤",
        "üè¶ DeFi-–ø—Ä–æ—Ç–æ–∫–æ–ª—ã: —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–∞—Ö",
        "‚Çø –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–∏—Ç–∫–æ–∏–Ω–∞: –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏",
        "‚õìÔ∏è –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫—á–µ–π–Ω-–º–µ—Ç—Ä–∏–∫: on-chain –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤",
        "ü™ô –ê–ª—å—Ç–∫–æ–∏–Ω—ã: –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –æ—Ç–±–æ—Ä–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤",
        "üí± –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤: –∫–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
        "üì± –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–ø—Ä–æ–µ–∫—Ç–æ–≤: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ?",
        "üîÑ –¶–∏–∫–ª—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞: –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ñ–∞–∑—ã –∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∏–º–∏",
        "‚õèÔ∏è –ú–∞–π–Ω–∏–Ω–≥ –∏ —Å—Ç–µ–π–∫–∏–Ω–≥: –ø–∞—Å—Å–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ",
        "üêã –ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –≤ –∫—Ä–∏–ø—Ç–µ: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–∏—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ –∏—Ö –≤–ª–∏—è–Ω–∏—è"
    ]
}

# –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã —Å —ç–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
EMOTIONAL_TOPICS_BY_CATEGORY = {
    "–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ": [
        "üî• –ö–∞–∫ —Ä–∞–∑–æ–≥–Ω–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç: —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞",
        "üí∞ –°–µ–∫—Ä–µ—Ç—ã –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–≤: –∫–∞–∫ –º—ã—Å–ª—è—Ç —É—Å–ø–µ—à–Ω—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã",
        "üöÄ –û—Ç –Ω–æ–≤–∏—á–∫–∞ –¥–æ –ø—Ä–æ—Ñ–∏: –ø—É—Ç—å —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞ –∑–∞ 12 –º–µ—Å—è—Ü–µ–≤",
        "‚ö° –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –±–æ–≥–∞—Ç—Å—Ç–≤–∞: –∫–∞–∫ –º—ã—Å–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø—Ä–∏–±—ã–ª–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
        "üíé –¢—Ä–µ–π–¥–∏–Ω–≥ –∫–∞–∫ —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏: –ø—É—Ç—å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
        "üèÜ 10 –ø—Ä–∏–≤—ã—á–µ–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è—é—Ç –∏–≥—Ä—É",
        "üí™ –ö–∞–∫ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å —Å—Ç—Ä–∞—Ö –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–º–µ–ª—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è",
        "‚ú® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞: –º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏",
        "üîÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É–¥—å–±–æ–π: –∫–∞–∫ —Ç—Ä–µ–π–¥–∏–Ω–≥ –º–µ–Ω—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é",
        "‚≠ê –§–æ—Ä–º—É–ª–∞ –ª–∏—á–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –∫–∞–∫ –¥–æ—Å—Ç–∏—á—å –±–æ–ª—å—à–µ–≥–æ, —Ç–æ—Ä–≥—É—è –º–µ–Ω—å—à–µ"
    ],
    "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ": [
        "üìö –§—É–Ω–¥–∞–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞: 7 –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤, –æ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–ª—á–∞—Ç –≥—É—Ä—É",
        "üß† –ù–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Ç—Ä–µ–π–¥–µ—Ä–∞: –∫–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–æ–∑–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞",
        "üìä –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –Ω—É–ª—è",
        "üîç –°–∫—Ä—ã—Ç—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä—ã–Ω–∫–∞: –Ω–∞ —á—Ç–æ —Å–º–æ—Ç—Ä—è—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã",
        "üìù –¢–æ—Ä–≥–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª –º–∞—Å—Ç–µ—Ä–∞: –∫–∞–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–¥–µ–ª–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
        "üì± –ú–æ–±–∏–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥: –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        "üéì –ê–∫–∞–¥–µ–º–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞: –æ—Ç —Ç–µ–æ—Ä–∏–∏ –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ",
        "üíª –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏: —Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ –Ω–∞–≤—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
        "üîé –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞: –º–µ—Ç–æ–¥—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤",
        "üìå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞: –∫–∞–∫ –≤—ã–±–∏—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Å–¥–µ–ª–∫–∏"
    ],
    "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ": [
        "üìà –ú–µ–∂—Ä—ã–Ω–æ—á–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∞–Ω–∞–ª–∏–∑—É –∞–∫—Ç–∏–≤–æ–≤",
        "üìâ –¶–∏–∫–ª—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö",
        "üßÆ –ö–≤–∞–Ω—Ç–∏—Ç–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ",
        "üß© –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä—ã–Ω–∫–∞: –∫–∞–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å",
        "üìä –û–±—ä–µ–º–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –∞–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: –≤–∑–≥–ª—è–¥ –≤ –≥–ª—É–±–∏–Ω—É —Ä—ã–Ω–∫–∞",
        "üî¢ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–æ–º–µ–Ω—Ç—É–º–∞: —Å–∏–Ω–µ—Ä–≥–∏—è –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ",
        "üì° –†—ã–Ω–æ—á–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏: –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏",
        "üìë –§–∞–∫—Ç–æ—Ä–Ω–æ–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–æ–±–∞—Å—Ç–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
        "üî¨ –ú–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞: –∞–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–±—É–∫–∞ –∏ –ø–æ—Ç–æ–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤",
        "üìã –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö: —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ"
    ],
    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–µ": [
        "‚ö†Ô∏è –°–∫—Ä—ã—Ç—ã–µ —Ä–∏—Å–∫–∏ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: —á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –∫–∞–∂–¥–æ–º—É",
        "üõë –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ª–æ–≤—É—à–∫–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞: –∫–∞–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –≤—Å—ë",
        "‚õî –ú–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –Ω–∞ —Ä—ã–Ω–∫–µ: –∫–∞–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ –∑–∞—â–∏—Ç–∏—Ç—å—Å—è",
        "üî¥ Burnout —Ç—Ä–µ–π–¥–µ—Ä–∞: –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è",
        "üö® –¢—Ä–µ–≤–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Ä—ã–Ω–∫–∞: –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–≥–æ—Å—è –∫—Ä–∞—Ö–∞",
        "‚è∞ –¢–∞–π–º-–∫–∏–ª–ª–µ—Ä—ã —Ç—Ä–µ–π–¥–µ—Ä–∞: –∫–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —Ç–µ—Ä—è—Ç—å –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å–≥–∏",
        "üßØ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Ä—ã –ø—Ä–∏ –æ–±–≤–∞–ª–µ —Ä—ã–Ω–∫–∞: –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π",
        "üì£ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–µ –∑–Ω–∞–∫–∏ –ø–µ—Ä–µ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞: –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è",
        "üö∑ –ó–æ–Ω—ã –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞: —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –ª—É—á—à–µ –Ω–µ –≤—Ö–æ–¥–∏—Ç—å –≤ —Ä—ã–Ω–æ–∫",
        "üîî –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö: —Ä–∞–∑–±–æ—Ä —Ñ–∞—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–π"
    ]
}

# Combine all categories into one list for easier access
TRADING_TOPICS = []
for category, topics in TRADING_TOPICS_BY_CATEGORY.items():
    TRADING_TOPICS.extend(topics)
for category, topics in EMOTIONAL_TOPICS_BY_CATEGORY.items():
    TRADING_TOPICS.extend(topics)

# Define image categories
TRADING_IMAGES = {
    "charts": [
        "https://images.unsplash.com/photo-1611974789855-9c2a0a7236e3?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1535320903710-d993d3d77d29?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1642790551116-304db6618f12?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1559526324-593bc073d938?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1569025690938-a00729c9e1f9?q=80&w=1000&auto=format&fit=crop"
    ],
    "crypto": [
        "https://images.unsplash.com/photo-1621761191319-c6fb62004040?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1624387312873-5f1d60cf7e5c?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1639322537504-6427a16b0a28?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1621504450181-5d356f61d307?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1625217527288-83595e7214c8?q=80&w=1000&auto=format&fit=crop"
    ],
    "stocks": [
        "https://images.unsplash.com/photo-1611974789855-9c2a0a7236e3?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1559526324-593bc073d938?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1526304640581-d334cdbbf45e?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1560221328-12fe60f83ab8?q=80&w=1000&auto=format&fit=crop"
    ],
    "trading_setup": [
        "https://images.unsplash.com/photo-1551288049-bebda4e38f71?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1611174743420-3d7df880ce32?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1461773518188-b3e86f98242f?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1593062096033-9a26b09da705?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1507679799987-c73779587ccf?q=80&w=1000&auto=format&fit=crop"
    ],
    "business": [
        "https://images.unsplash.com/photo-1460925895917-afdab827c52f?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1591696205602-2f950c417cb9?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1579532537598-459ecdaf39cc?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1553729459-efe14ef6055d?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1444653614773-995cb1ef9efa?q=80&w=1000&auto=format&fit=crop"
    ],
    "motivation": [
        "https://images.unsplash.com/photo-1522202176988-66273c2fd55f?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1596720426673-e4e14290f0cc?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1552664730-d307ca884978?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1533073526757-2c8ca1df9f1c?q=80&w=1000&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1553877522-43269d4ea984?q=80&w=1000&auto=format&fit=crop"
    ]
}

def generate_post_text(prompt=None, emotion="motivational"):
    """Generate text content using OpenRouter's GPT-4 or Claude
    
    Args:
        prompt (str, optional): –¢–µ–º–∞ –ø–æ—Å—Ç–∞
        emotion (str, optional): –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω (motivational, educational, analytical, cautionary)
    """
    try:
        if not prompt:
            # If no prompt specified, return general advice
            return "üìä –í–∞–∂–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: –≤—Å–µ–≥–¥–∞ —Å–ª–µ–¥—É–π—Ç–µ —Å–≤–æ–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–∏—Å–∫–∞–º–∏. #—Ç—Ä–µ–π–¥–∏–Ω–≥ #–±–∏—Ä–∂–∞ #–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
        
        # The API key should be set in environment variables
        if not OPENROUTER_API_KEY:
            logger.error("OpenRouter API key is not set")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞–±–æ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–æ–Ω–æ–≤
            fallback_by_emotion = {
                "motivational": [
                    "üöÄ –í–∞—à–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –±—É–¥—É—â–µ–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏. –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å —É–º–æ–º, —Å–ª–µ–¥—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –∑–∞—Å—Ç–∞–≤—è—Ç —Å–µ–±—è –∂–¥–∞—Ç—å. #—Ç—Ä–µ–π–¥–∏–Ω–≥ #–ø—Ä–∏–±—ã–ª—å #tradepo",
                    "üí™ –¢—Ä–µ–π–¥–∏–Ω–≥ ‚Äî —ç—Ç–æ –º–∞—Ä–∞—Ñ–æ–Ω, –∞ –Ω–µ —Å–ø—Ä–∏–Ω—Ç. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–µ–ª–∞–π—Ç–µ —à–∞–≥ –≤–ø–µ—Ä–µ–¥, –¥–∞–∂–µ –µ—Å–ª–∏ —Ä—ã–Ω–æ–∫ –∏–¥–µ—Ç –≤ —Å—Ç–æ—Ä–æ–Ω—É. –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ ‚Äî –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É. #—Ç—Ä–µ–π–¥–∏–Ω–≥ #—É—Å–ø–µ—Ö #tradepo",
                    "‚≠ê –í–µ–ª–∏–∫–∏–µ —Ç—Ä–µ–π–¥–µ—Ä—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –æ—à–∏–±–æ–∫, –∞ —É–º–µ–Ω–∏–µ–º –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ –Ω–∏—Ö —É—Ä–æ–∫–∏. –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –∫–∞–∂–¥—É—é –Ω–µ—É–¥–∞—á—É –≤ —Å—Ç—É–ø–µ–Ω—å–∫—É –∫ —É—Å–ø–µ—Ö—É. #—Ç—Ä–µ–π–¥–∏–Ω–≥ #—Ä–∞–∑–≤–∏—Ç–∏–µ #tradepo"
                ],
                "educational": [
                    "üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∏. –ò–∑—É—á–∞–π—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –æ–Ω–∏ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ —ç–º–æ—Ü–∏–∏ –Ω–µ–∏–∑–º–µ–Ω–Ω—ã. #—Ç—Ä–µ–π–¥–∏–Ω–≥ #—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π–∞–Ω–∞–ª–∏–∑ #tradepo",
                    "üìö –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –ß–¢–û –ø–æ–∫—É–ø–∞—Ç—å, –∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π ‚Äî –ö–û–ì–î–ê. –ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ –æ–±–∞ –ø–æ–¥—Ö–æ–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –≤–∑–≤–µ—à–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. #—Ç—Ä–µ–π–¥–∏–Ω–≥ #–∞–Ω–∞–ª–∏–∑ #tradepo",
                    "üßÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º –≤–∞–∂–Ω–µ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏—Å—Ö–æ–¥—è –∏–∑ —Ä–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å –Ω–∞ –∫–∞–∂–¥—É—é —Å–¥–µ–ª–∫—É. #—Ç—Ä–µ–π–¥–∏–Ω–≥ #–∫–∞–ø–∏—Ç–∞–ª #tradepo"
                ],
                "analytical": [
                    "üìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏ –º–µ–Ω—è–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º. –†–µ–≥—É–ª—è—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –≤ —Å–≤–æ–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏. #—Ç—Ä–µ–π–¥–∏–Ω–≥ #–∞–Ω–∞–ª–∏–∑ #tradepo",
                    "üîç –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞. –†–∞—Å—Ç—É—â–∏–π —Ç—Ä–µ–Ω–¥ —Å —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–º—Å—è –æ–±—ä–µ–º–æ–º –∏–º–µ–µ—Ç –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ. #—Ç—Ä–µ–π–¥–∏–Ω–≥ #–æ–±—ä–µ–º #tradepo",
                    "üìâ –†—ã–Ω–æ–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç 80% –≤—Ä–µ–º–µ–Ω–∏ –≤ –±–æ–∫–æ–≤–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏ –∏ —Ç–æ–ª—å–∫–æ 20% –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Ç—Ä–µ–Ω–¥–µ. –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫ —Ç–µ–∫—É—â–∏–º —É—Å–ª–æ–≤–∏—è–º. #—Ç—Ä–µ–π–¥–∏–Ω–≥ #—Å—Ç—Ä–∞—Ç–µ–≥–∏—è #tradepo"
                ],
                "cautionary": [
                    "‚ö†Ô∏è –ù–µ —Ä–∏—Å–∫—É–π—Ç–µ –¥–µ–Ω—å–≥–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ—Ç–µ—Ä—è—Ç—å. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ ‚Äî –ø–µ—Ä–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞. #—Ç—Ä–µ–π–¥–∏–Ω–≥ #—Ä–∏—Å–∫–∏ #tradepo",
                    "üõë –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è ‚Äî –≥–ª–∞–≤–Ω—ã–π –≤—Ä–∞–≥ —Ç—Ä–µ–π–¥–µ—Ä–∞. –í—Å–µ–≥–¥–∞ —Å–ª–µ–¥—É–π—Ç–µ –ø–ª–∞–Ω—É –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ç–æ—Ä–≥—É–π—Ç–µ –ø–æ–¥ –≤–ª–∏—è–Ω–∏–µ–º —Å—Ç—Ä–∞—Ö–∞ –∏–ª–∏ –∂–∞–¥–Ω–æ—Å—Ç–∏. #—Ç—Ä–µ–π–¥–∏–Ω–≥ #–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è #tradepo",
                    "‚õî –ü–æ–º–Ω–∏—Ç–µ –æ —á–µ—Ä–Ω—ã—Ö –ª–µ–±–µ–¥—è—Ö ‚Äî –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ä—ã–Ω–æ–∫. –í—Å–µ–≥–¥–∞ –∏–º–µ–π—Ç–µ –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –≤ –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö. #—Ç—Ä–µ–π–¥–∏–Ω–≥ #–∑–∞—â–∏—Ç–∞ #tradepo"
                ]
            }
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ç–æ–Ω—É
            fallback_texts = fallback_by_emotion.get(emotion, fallback_by_emotion["motivational"])
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
            if prompt:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –æ—Ç —Ç–µ–º—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –¥–ª—è –æ–¥–Ω–æ–π —Ç–µ–º—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
                index = sum(ord(c) for c in prompt) % len(fallback_texts)
                selected_text = fallback_texts[index]
                # –î–æ–±–∞–≤–ª—è–µ–º —Ö—ç—à—Ç–µ–≥ —Ç–µ–º—ã
                theme_hashtag = f"#{prompt.replace(' ', '')}"
                return f"{selected_text} {theme_hashtag}"
            else:
                return random.choice(fallback_texts)
            
        headers = {
            "HTTP-Referer": "https://replit.com",  # Add referer for OpenRouter
            "X-Title": "TRADEPO Bot",
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ–Ω–∞
        emotional_tone_descriptions = {
            "motivational": "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π —Å—Ç–∏–ª—å, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É—Å–ø–µ—Ö–∞.",
            "educational": "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π. –î–µ–ª–∏—Å—å —Ü–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏, –æ–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã.",
            "analytical": "–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π. –ü—Ä–∏–≤–æ–¥–∏ —Ñ–∞–∫—Ç—ã, —Ü–∏—Ñ—Ä—ã, –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏—é —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω, —Å–æ—Ö—Ä–∞–Ω—è—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–æ–Ω.",
            "cautionary": "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π –æ —Ä–∏—Å–∫–∞—Ö. –û–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –≤–∞–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–ø–æ—Å–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∏—Å–∫–æ–≤."
        }
        
        emotional_tone = emotional_tone_descriptions.get(emotion, emotional_tone_descriptions["motivational"])
        
        # Expand prompt to make it more substantial
        user_prompt = prompt
        current_time = datetime.datetime.now()
        
        # –ö–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ç–æ–∫–µ–Ω–∞–º
        content_request = f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –æ {user_prompt}. –ù–∞—á–Ω–∏ —Å —ç–º–æ–¥–∑–∏. –î–æ–±–∞–≤—å #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo"
            
        data = {
            "model": "anthropic/claude-3-haiku",  # Use more accessible model
            "messages": [
                {"role": "system", "content": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –¢–≤–æ–π —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞ - –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π. –°–æ–∑–¥–∞–≤–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç."},
                {"role": "user", "content": content_request}
            ],
            "max_tokens": 30,  # –°—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–æ–≤ API
            "temperature": 0.8  # Increase for more variety
        }
            
        for attempt in range(MAX_RETRIES):
            try:
                logger.info(f"Generating text, attempt {attempt+1}")
                response = requests.post("https://openrouter.ai/api/v1/chat/completions", json=data, headers=headers, timeout=60)
                response.raise_for_status()
                
                response_data = response.json()
                logger.debug(f"API response: {response_data}")
                
                # Check response format
                if 'choices' in response_data and len(response_data['choices']) > 0:
                    if 'message' in response_data['choices'][0] and 'content' in response_data['choices'][0]['message']:
                        text = response_data['choices'][0]['message']['content']
                    else:
                        # Fallback if structure is different
                        logger.warning("Unexpected response structure (no message/content)")
                        if 'text' in response_data:
                            text = response_data['text']
                        else:
                            raise KeyError("No recognizable text content in response")
                elif 'error' in response_data:
                    # Handle API error
                    error_message = response_data.get('error', {}).get('message', 'Unknown API error')
                    logger.error(f"API error: {error_message}")
                    raise KeyError(f"API error: {error_message}")
                else:
                    # If no choices field, use fallback
                    logger.warning("No 'choices' field in response, trying fallback extraction")
                    # Try to get text from arbitrary field
                    if 'output' in response_data:
                        text = response_data['output']
                    elif 'generated_text' in response_data:
                        text = response_data['generated_text']
                    else:
                        raise KeyError("Could not extract text from response")
                
                # Remove any markdown syntax that might be present
                text = text.replace('```', '').strip()
                
                logger.info(f"Generated text: {text[:50]}...")
                return text
                
            except Exception as e:
                logger.error(f"Error in text generation attempt {attempt+1}: {e}")
                if attempt < MAX_RETRIES - 1:
                    time.sleep(RETRY_DELAY)
                else:
                    # If all retries failed, return error
                    raise Exception(f"Failed to generate text after {MAX_RETRIES} attempts: {str(e)}")
                    
    except Exception as e:
        logger.error(f"Error in generate_post_text: {e}")
        
        # –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API
        detailed_fallback_texts = {
            "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑": [
                "üìä **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞**\n\n–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –ø–∞—Ç—Ç–µ—Ä–Ω ¬´–≥–æ–ª–æ–≤–∞ –∏ –ø–ª–µ—á–∏¬ª —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å –∏ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—ä–µ–º–æ–º. –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —ç—Ç–æ–π —Ñ–∏–≥—É—Ä–æ–π –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ 5-7% –≤—ã—à–µ –ª–∏–Ω–∏–∏ —à–µ–∏, –∞ —Ü–µ–ª–µ–≤—É—é –ø—Ä–∏–±—ã–ª—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –≤—ã—Å–æ—Ç—É –æ—Ç –º–∞–∫—É—à–∫–∏ –¥–æ –ª–∏–Ω–∏–∏ —à–µ–∏. –í 75% —Å–ª—É—á–∞–µ–≤ —ç—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–∏–Ω–æ—Å–∏—Ç 2R+ –¥–æ—Ö–æ–¥–∞. #—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π–∞–Ω–∞–ª–∏–∑ #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo",
                "üìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ**\n\n–ó–Ω–∞–ª–∏ –ª–∏ –≤—ã, —á—Ç–æ RSI –≤ 80% —Å–ª—É—á–∞–µ–≤ –¥–∞–µ—Ç –ª–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ —Å–∏–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–∞—Ö? –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç RSI —Å –ø–µ—Ä–∏–æ–¥–æ–º 14 —Ç–æ–ª—å–∫–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö, –¥–æ–±–∞–≤–ª—è—è EMA(200) –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤. –í –±–æ–∫–æ–≤–∏–∫–µ —É—Ä–æ–≤–Ω–∏ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ (70+) –∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (30-) –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç, –¥–∞–≤–∞—è –¥–æ 68% –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫. #RSI #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo",
                "üïØÔ∏è **–°–µ–∫—Ä–µ—Ç—ã —è–ø–æ–Ω—Å–∫–∏—Ö —Å–≤–µ—á–µ–π**\n\n–ú–æ–ª–æ—Ç –∏ –ø–æ–≤–µ—à–µ–Ω–Ω—ã–π ‚Äî —ç—Ç–æ —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω—ã–µ —Å–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 65% –Ω–∞ –¥–Ω–µ–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞—Ö. –ö–ª—é—á–µ–≤–æ–µ –æ—Ç–ª–∏—á–∏–µ: –º–æ–ª–æ—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –¥–Ω–µ –∏ –∏–º–µ–µ—Ç –∑–µ–ª–µ–Ω–æ–µ —Ç–µ–ª–æ, –ø–æ–≤–µ—à–µ–Ω–Ω—ã–π ‚Äî –Ω–∞ –≤–µ—Ä—à–∏–Ω–µ —Å –∫—Ä–∞—Å–Ω—ã–º —Ç–µ–ª–æ–º. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–∫—Ä—ã—Ç–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –∏ —Ä–æ—Å—Ç –æ–±—ä–µ–º–∞ –Ω–∞ 20%+. #—Å–≤–µ—á–Ω—ã–π–∞–Ω–∞–ª–∏–∑ #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo"
            ],
            "—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑": [
                "üíº **–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞**\n\n–î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ (FCF) ‚Äî –≤–∞–∂–Ω–µ–π—à–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–∞–Ω–∏–∏. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø—Ä–∏–±—ã–ª–∏, –µ–≥–æ —Å–ª–æ–∂–Ω–µ–µ –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞—Ç—å. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ —Å —Ä–∞—Å—Ç—É—â–∏–º FCF –≤ —Ç–µ—á–µ–Ω–∏–µ 5+ –ª–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–∞ 12% –≤—ã—à–µ —Ä—ã–Ω–∫–∞. –ò—â–∏—Ç–µ –±–∏–∑–Ω–µ—Å—ã —Å –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π FCF/–≤—ã—Ä—É—á–∫–∞ –≤—ã—à–µ 15% –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º —Ä–æ—Å—Ç–æ–º —ç—Ç–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è. #–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo",
                "üìë **–ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã –≤ –æ—Ü–µ–Ω–∫–µ –∞–∫—Ü–∏–π**\n\n–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ P/E –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ —Ç–æ–ª—å–∫–æ —Å –∞–Ω–∞–ª–æ–≥–∞–º–∏, –Ω–æ –∏ —Å —Ç–µ–º–ø–∞–º–∏ —Ä–æ—Å—Ç–∞. –ü—Ä–∞–≤–∏–ª–æ –õ–∏–Ω—á–∞: —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ P/E –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω–æ —Ç–µ–º–ø—É —Ä–æ—Å—Ç–∞ –ø—Ä–∏–±—ã–ª–∏. –ö–æ–º–ø–∞–Ω–∏–∏ —Å P/E/G < 1 —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–º–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ ROE > 15% –∏ –¥–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ Net Debt/EBITDA < 2. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ —Ç–∞–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ–ø–µ—Ä–µ–∂–∞—é—Ç —Ä—ã–Ω–æ–∫ –Ω–∞ 8-12% –≥–æ–¥–æ–≤—ã—Ö. #–∞–∫—Ü–∏–∏ #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo",
                "üåê **–ì–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∞ –∏ —Ä—ã–Ω–∫–∏**\n\n–í —Å—Ä–µ–¥–Ω–µ–º —Ä—ã–Ω–∫–∏ –æ—Ç—ã–≥—Ä—ã–≤–∞—é—Ç –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —à–æ–∫–∏ –∑–∞ 13 –Ω–µ–¥–µ–ª—å (–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ Ned Davis Research). –í—ã–±–æ—Ä—ã –ø–æ–≤—ã—à–∞—é—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ 18-22% –≤ —Å—Ä–µ–¥–Ω–µ–º, –∞ —Å–∞–º—ã–π —Å–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –≤ 3-–π –≥–æ–¥ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–æ–≥–æ —Ü–∏–∫–ª–∞. –ú–æ–Ω–µ—Ç–∞—Ä–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–∏ —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –§–†–° –Ω–∞ 25 –±.–ø. –≤ —Å—Ä–µ–¥–Ω–µ–º –¥–≤–∏–≥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ 2-3%. #–≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∞ #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo"
            ],
            "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞": [
                "üß† **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞: –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ö–∞ –ø–æ—Ç–µ—Ä—å**\n\n–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ —Ç—Ä–µ–π–¥–µ—Ä—ã –æ—â—É—â–∞—é—Ç –ø–æ—Ç–µ—Ä–∏ –≤ 2,5 —Ä–∞–∑–∞ –æ—Å—Ç—Ä–µ–µ, —á–µ–º –ø—Ä–∏–±—ã–ª—å —Ç–æ–≥–æ –∂–µ —Ä–∞–∑–º–µ—Ä–∞ (—ç—Ñ—Ñ–µ–∫—Ç –ö–∞–Ω–µ–º–∞–Ω–∞-–¢–≤–µ—Ä—Å–∫–∏). –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ ¬´–ø—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ö —É–±—ã—Ç–∫–æ–≤¬ª: –ø–æ—Å–ª–µ 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–µ–ª–∞–π—Ç–µ –ø–∞—É–∑—É –Ω–∞ 24 —á–∞—Å–∞ –∏ —É–º–µ–Ω—å—à–∞–π—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π –Ω–∞ 50%. –≠—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –¥–æ 31% –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ—Å–∞–¥–æ–∫. #–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo",
                "‚ö° **–ò–º–ø—É–ª—å—Å–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ**\n\n–í —Å—Ä–µ–¥–Ω–µ–º —Ç—Ä–µ–π–¥–µ—Ä—ã —Å–æ–≤–µ—Ä—à–∞—é—Ç 5 –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ 10 –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—Ç—Ä–µ—Å—Å–∞. –†–µ—à–µ–Ω–∏–µ? –ó–∞–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º –∏–∑ 5 –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–Ω–∏–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–∞ 42% –∏ –ø–æ–≤—ã—à–∞–µ—Ç –æ–±—â—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–∞ 18%. #–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo",
                "üò± **–°–∏–Ω–¥—Ä–æ–º —É–ø—É—â–µ–Ω–Ω–æ–π –≤—ã–≥–æ–¥—ã (FOMO)**\n\nFOMO –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –≤—Ö–æ–¥–∏—Ç—å –Ω–∞ 22% –≤—ã—à–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞ (–¥–∞–Ω–Ω—ã–µ TradeStation). –ü—Ä–æ—Ç–∏–≤–æ—è–¥–∏–µ: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ –∏ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å –∏—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ 3-6-9: –∂–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –º–∏–Ω–∏–º—É–º –Ω–∞ 3% –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–∞—Ö, 6% –≤ —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã—Ö –∏ 9% –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –ø–æ–∑–∏—Ü–∏—é. #FOMO #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo"
            ],
            "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏": [
                "üìè **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º**\n\n–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ 62% —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–∏—Å–∫—É—é—Ç –±–æ–ª–µ–µ —á–µ–º 1-2% –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É–ª—É –ö–µ–ª–ª–∏ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ª—è = (—à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–∞ - —à–∞–Ω—Å –ø—Ä–æ–∏–≥—Ä—ã—à–∞) / –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–∞) –∏ —É–º–Ω–æ–∂–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 0.5 –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã. #—Ä–∏—Å–∫–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo",
                "üõ°Ô∏è **–•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π**\n\n–ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–µ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–∞–º–∏ —Å—Ç–æ–∏—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º 1-3% –≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏, –Ω–æ —Å–ø–∞—Å–∞–µ—Ç –æ—Ç 15-30% –ø—Ä–æ—Å–∞–¥–∫–∏ –≤ –∫—Ä–∏–∑–∏—Å—ã. –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø–æ–∫—É–ø–∫–∞ –ø—É—Ç-–æ–ø—Ü–∏–æ–Ω–æ–≤ –Ω–∞ 5-10% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å–æ —Å—Ç—Ä–∞–π–∫–æ–º 10-15% –Ω–∏–∂–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ 60-90 –¥–Ω–µ–π. –í –ø–µ—Ä–∏–æ–¥—ã –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (VIX<15) —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞–∫–æ–π –∑–∞—â–∏—Ç—ã –º–∏–Ω–∏–º–∞–ª—å–Ω–∞. #—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo",
                "üîÑ **–ê–Ω—Ç–∏—Ö—Ä—É–ø–∫–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã**\n\n–í –ø–µ—Ä–∏–æ–¥—ã –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ 91% —Ä–æ–∑–Ω–∏—á–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ —Ç–µ—Ä—è—é—Ç –¥–µ–Ω—å–≥–∏ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞. –†–µ—à–µ–Ω–∏–µ? –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 2xATR(14) –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –ø–æ —Ç—Ä–µ–Ω–¥—É –∏ 1xATR(14) –¥–ª—è –∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ —ç—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ 23% –±–æ–ª—å—à–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –≤ —Ç—É—Ä–±—É–ª–µ–Ω—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã. #–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo"
            ],
            "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã": [
                "‚Çø **–¶–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞**\n\n–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –±–∏—Ç–∫–æ–∏–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∫–∞–∂–¥—ã–µ 3.5-4 –≥–æ–¥–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Ö–∞–ª–≤–∏–Ω–≥–∞–º–∏. –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—ã—á—å–∏—Ö —Ä—ã–Ω–∫–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 12-15 –º–µ—Å—è—Ü–µ–≤, –º–µ–¥–≤–µ–∂—å–∏—Ö ‚Äî 18-24 –º–µ—Å—è—Ü–∞. –ü–æ—Å–ª–µ —Ö–∞–ª–≤–∏–Ω–≥–∞ –¥–æ –ø–∏–∫–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º 12-18 –º–µ—Å—è—Ü–µ–≤, —Å ROI –æ—Ç –Ω–∏–∑–∞ –¥–æ –ø–∏–∫–∞ –≤ 10-25x. –õ—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Äî –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ—Ç–∏ –º–µ–¥–≤–µ–∂—å–µ–≥–æ —Ä—ã–Ω–∫–∞. #–±–∏—Ç–∫–æ–∏–Ω #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo",
                "‚õìÔ∏è **On-chain –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç**\n\n–ú–µ—Ç—Ä–∏–∫–∞ SOPR (Spent Output Profit Ratio) —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 72% –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç—ã –Ω–∞ —Ä—ã–Ω–∫–µ BTC. –ó–Ω–∞—á–µ–Ω–∏—è –Ω–∏–∂–µ 1 –≤ —Ç–µ—á–µ–Ω–∏–µ 30+ –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ —É–∫–∞–∑—ã–≤–∞–ª–∏ –Ω–∞ –¥–Ω–æ, –∞ —É—Å—Ç–æ–π—á–∏–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—à–µ 1.5 ‚Äî –Ω–∞ –ø–∏–∫. –î–æ–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫–æ–π MVRV-Z Score: –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∏–∂–µ 0 —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –æ –Ω–µ–¥–æ–æ—Ü–µ–Ω–∫–µ, –≤—ã—à–µ 7 ‚Äî –æ –ø–µ—Ä–µ–≥—Ä–µ–≤–µ —Ä—ã–Ω–∫–∞. #–∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑ #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo",
                "ü™ô **–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤**\n\n–ü—Ä–∏ –æ—Ç–±–æ—Ä–µ –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤ –æ—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —Ç–æ–∫–µ–Ω–æ–º–∏–∫—É: –∑–¥–æ—Ä–æ–≤–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è (—ç–º–∏—Å—Å–∏—è) ‚Äî –Ω–µ –±–æ–ª–µ–µ 10-15% –≤ –≥–æ–¥, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî –∫–æ–º–∞–Ω–¥–∞ –∏ –∏–Ω—Å–∞–π–¥–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –≤–ª–∞–¥–µ—Ç—å –Ω–µ –±–æ–ª–µ–µ 30-40%. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (vesting) –º–∏–Ω–∏–º—É–º 2-3 –≥–æ–¥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞. –ü—Ä–æ–µ–∫—Ç—ã —Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º FDV/TVL < 2 –¥–ª—è DeFi –∏–ª–∏ P/S < 10 –¥–ª—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ª—É—á—à—É—é –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É. #–∞–ª—å—Ç–∫–æ–∏–Ω—ã #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo"
            ]
        }
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ–º –∏–ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        fallback_texts = [
            "üìä –í–∞–∂–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä—ã–Ω–æ–∫ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–æ–π –∏ —Å–ª–µ–¥—É–π—Ç–µ —Å–≤–æ–µ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É –ø–ª–∞–Ω—É. –£—Å–ø–µ—à–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥ —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ!",
            "üí∞ –¢—Ä–µ–π–¥–∏–Ω–≥ ‚Äî —ç—Ç–æ –º–∞—Ä–∞—Ñ–æ–Ω, –∞ –Ω–µ —Å–ø—Ä–∏–Ω—Ç. –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º —Ü–µ–ª—è–º –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–º.",
            "üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ ‚Äî —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –≤ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É –±–æ–ª—å—à–µ, —á–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ—Ç–µ—Ä—è—Ç—å.",
            "üíº –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤ —Ä—ã–Ω–æ—á–Ω—ã—Ö –∫–æ–ª–µ–±–∞–Ω–∏—è—Ö —Å–∫—Ä—ã—Ç—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã –≤–∏–¥—è—Ç –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ç–∞–º, –≥–¥–µ –¥—Ä—É–≥–∏–µ –ø–∞–Ω–∏–∫—É—é—Ç.",
            "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å ‚Äî –≤–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞ —Ä—ã–Ω–∫–µ. –†–∞–∑–≤–∏–≤–∞–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.",
            "üì± –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–∑–º–µ–Ω–∏–ª–∏ —Ä—ã–Ω–∫–∏ –Ω–∞–≤—Å–µ–≥–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä–µ–¥–∏.",
            "üîç –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –ß–¢–û –ø–æ–∫—É–ø–∞—Ç—å, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, –ö–û–ì–î–ê —ç—Ç–æ –¥–µ–ª–∞—Ç—å.",
            "‚ö° –†—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –º–æ–≥—É—Ç –¥–ª–∏—Ç—å—Å—è –¥–æ–ª—å—à–µ, —á–µ–º –≤—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ. –ù–µ —Å–ø–µ—à–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤ —Ç–µ—á–µ–Ω–∏—è –±–µ–∑ –≤–µ—Å–∫–∏—Ö –ø—Ä–∏—á–∏–Ω."
        ]
        
        # Use the theme as a seed for randomization to ensure different themes get different texts
        # but the same theme consistently gets the same text within a session
        seed = sum(ord(c) for c in prompt) if prompt else 0
        random.seed(seed + time.time())  # Add time to ensure variation even for the same theme
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ —Ç–µ–º–µ
        theme_lower = prompt.lower() if prompt else ""
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ —Ç–µ–º–µ
        for category, texts in detailed_fallback_texts.items():
            category_keywords = {
                "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑": ["—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π", "–∞–Ω–∞–ª–∏–∑", "–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä", "–≥—Ä–∞—Ñ–∏–∫", "—Å–≤–µ—á–∏", "–ø–∞—Ç—Ç–µ—Ä–Ω", "—Ç—Ä–µ–π–¥"],
                "—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑": ["—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π", "–∞–Ω–∞–ª–∏–∑", "–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å", "–∫–æ–º–ø–∞–Ω–∏", "–º–∞–∫—Ä–æ", "—ç–∫–æ–Ω–æ–º–∏"],
                "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞": ["–ø—Å–∏—Ö–æ–ª–æ–≥", "—ç–º–æ—Ü", "—Å—Ç—Ä–∞—Ö", "–¥–∏—Å—Ü–∏–ø–ª–∏–Ω", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á", "—Å—Ç—Ä–∞—Ç–µ"],
                "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏": ["—Ä–∏—Å–∫", "—É–ø—Ä–∞–≤–ª–µ–Ω", "—Å—Ç–æ–ø", "–ª–æ—Å—Å", "–∫–∞–ø–∏—Ç–∞–ª", "–ø–æ–∑–∏—Ü", "—Ö–µ–¥–∂"],
                "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã": ["–∫—Ä–∏–ø—Ç", "–±–∏—Ç–∫–æ–∏–Ω", "–±–ª–æ–∫—á–µ–π–Ω", "–∞–ª—å—Ç–∫–æ–∏–Ω", "—Ç–æ–∫–µ–Ω", "–º–∞–π–Ω–∏–Ω–≥"]
            }
            
            keywords = category_keywords.get(category, [])
            for keyword in keywords:
                if keyword in theme_lower:
                    # –ù–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                    return random.choice(texts)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π fallback
        fallback_text = random.choice(fallback_texts)
        
        # Add hashtags and theme-specific hashtag
        theme_hashtag = f"#{prompt.replace(' ', '')}" if prompt else "#—Ç—Ä–µ–π–¥–∏–Ω–≥"
        return f"{fallback_text} {theme_hashtag} #—Ç—Ä–µ–π–¥–∏–Ω–≥ #tradepo"

def get_image_url_by_theme(theme="", emotion="motivational"):
    """Get an image URL that matches the post theme
    
    Args:
        theme (str): –¢–µ–º–∞ –ø–æ—Å—Ç–∞
        emotion (str): –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω –ø–æ—Å—Ç–∞
    
    Returns:
        str: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    # Try to get image from custom image list first
    custom_image = get_image_from_file()
    if custom_image:
        return custom_image
    
    # Determine best category based on theme keywords
    theme_lower = theme.lower() if theme else ""
    
    # Keywords that indicate which category to use
    category_keywords = {
        "charts": ["–≥—Ä–∞—Ñ–∏–∫", "—Ç—Ä–µ–Ω–¥", "–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π", "–∞–Ω–∞–ª–∏–∑", "—Å–≤–µ—á–∏", "–ø–∞—Ç—Ç–µ—Ä–Ω", "—Ñ–∏–≥—É—Ä—ã"],
        "crypto": ["–∫—Ä–∏–ø—Ç–æ", "–±–∏—Ç–∫–æ–∏–Ω", "–∞–ª—å—Ç–∫–æ–∏–Ω", "nft", "–±–ª–æ–∫—á–µ–π–Ω", "—Ç–æ–∫–µ–Ω", "–º–∞–π–Ω–∏–Ω–≥", "—Å—Ç–µ–π–∫–∏–Ω–≥"],
        "stocks": ["–∞–∫—Ü–∏–∏", "—Ñ–æ–Ω–¥–æ–≤—ã–π", "—Ü–µ–Ω–Ω—ã–µ –±—É–º–∞–≥–∏", "–¥–∏–≤–∏–¥–µ–Ω–¥—ã", "–æ–ø—Ü–∏–æ–Ω", "—Ñ—å—é—á–µ—Ä—Å", "–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω"],
        "trading_setup": ["—Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ", "—Ç–µ—Ä–º–∏–Ω–∞–ª", "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", "—Å–∫–∞–ª—å–ø–∏–Ω–≥", "–¥–µ–π—Ç—Ä–µ–π–¥–∏–Ω–≥"],
        "business": ["–±–∏–∑–Ω–µ—Å", "–∫–∞—Ä—å–µ—Ä–∞", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–¥–æ—Ö–æ–¥", "–∫–∞–ø–∏—Ç–∞–ª", "–ø–æ—Ä—Ç—Ñ–µ–ª—å"],
        "motivation": ["–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "—É—Å–ø–µ—Ö", "–º–æ—Ç–∏–≤–∞—Ü–∏—è", "–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", "–º—ã—à–ª–µ–Ω–∏–µ", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è"]
    }
    
    # Check for keywords in theme
    matching_categories = []
    for category, keywords in category_keywords.items():
        for keyword in keywords:
            if keyword in theme_lower:
                matching_categories.append(category)
                break
    
    # Map emotion to image category if no matching keywords found
    emotion_to_category = {
        "motivational": ["motivation", "business"],
        "educational": ["charts", "trading_setup"],
        "analytical": ["charts", "stocks"],
        "cautionary": ["stocks", "business"]
    }
    
    # If no matching categories, use emotion mapping or default to charts
    if not matching_categories:
        emotion_categories = emotion_to_category.get(emotion, ["charts"])
        category = random.choice(emotion_categories)
    else:
        category = random.choice(matching_categories)
    
    # Get images for the category
    category_images = TRADING_IMAGES.get(category, TRADING_IMAGES["charts"])
    
    # Return a random image from the category
    return random.choice(category_images)

def get_image_from_file():
    """Get a random image URL from the image_urls.txt file"""
    try:
        if os.path.exists('image_urls.txt'):
            with open('image_urls.txt', 'r', encoding='utf-8') as f:
                urls = [line.strip() for line in f.readlines() if line.strip()]
                
            if urls:
                return random.choice(urls)
                
    except Exception as e:
        logger.error(f"Error getting image URL from file: {e}")
        
    # Return None if no custom image is available
    return None

def send_telegram_message(text, image_url=None):
    """Send message to Telegram channel"""
    if not TELEGRAM_TOKEN:
        logger.error("Telegram token is not set")
        return False, "Telegram token is not set"
        
    if not CHANNEL_ID:
        logger.error("Channel ID is not set")
        return False, "Channel ID is not set"
        
    try:
        api_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/"
        
        if image_url:
            # Send photo with caption
            endpoint = api_url + "sendPhoto"
            data = {
                "chat_id": CHANNEL_ID,
                "photo": image_url,
                "caption": text,
                "parse_mode": "HTML"
            }
        else:
            # Send text message
            endpoint = api_url + "sendMessage"
            data = {
                "chat_id": CHANNEL_ID,
                "text": text,
                "parse_mode": "HTML"
            }
            
        for attempt in range(MAX_RETRIES):
            try:
                logger.info(f"Sending message to Telegram, attempt {attempt+1}")
                response = requests.post(endpoint, data=data, timeout=30)
                response.raise_for_status()
                
                response_data = response.json()
                logger.debug(f"Telegram API response: {response_data}")
                
                if response_data.get('ok', False):
                    message_id = response_data.get('result', {}).get('message_id', None)
                    logger.info(f"Message sent successfully, message_id: {message_id}")
                    return True, message_id
                else:
                    error_description = response_data.get('description', 'Unknown error')
                    logger.error(f"Telegram API error: {error_description}")
                    return False, error_description
                    
            except Exception as e:
                logger.error(f"Error in send attempt {attempt+1}: {e}")
                if attempt < MAX_RETRIES - 1:
                    time.sleep(RETRY_DELAY)
                else:
                    # If all retries failed
                    return False, f"Failed to send message after {MAX_RETRIES} attempts: {str(e)}"
                    
    except Exception as e:
        logger.error(f"Error in send_telegram_message: {e}")
        return False, str(e)

def create_and_send_post(theme, emotion="motivational"):
    """Create and send a post to the Telegram channel
    
    Args:
        theme (str): –¢–µ–º–∞ –ø–æ—Å—Ç–∞
        emotion (str, optional): –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω (motivational, educational, analytical, cautionary)
    """
    start_time = time.time()
    success = False
    text = None
    image_url = None
    result = None
    error = None
    
    try:
        logger.info(f"Creating post with theme: {theme}, emotion: {emotion}")
        
        # Generate text for the post using the specified emotion
        text = generate_post_text(theme, emotion)
        
        # Get thematically relevant image URL based on the post content
        image_url = get_image_url_by_theme(theme, emotion)
        
        # Make sure we have a valid image URL - —ç—Ç–æ —Ö–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ—à–∏–±–∫–∏ Telegram API
        if not image_url or not image_url.startswith(('http://', 'https://')):
            # –ï—Å–ª–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—ã–µ –∑–∞–ø–∞—Å–Ω—ã–µ URL
            fallback_images = [
                "https://images.unsplash.com/photo-1611974789855-9c2a0a7236e3?q=80&w=1000&auto=format&fit=crop",  # –¢–æ—Ä–≥–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
                "https://images.unsplash.com/photo-1590283603385-17ffb3a7f29f?q=80&w=1000&auto=format&fit=crop",  # –ë–∏–∑–Ω–µ—Å
                "https://images.unsplash.com/photo-1535320903710-d993d3d77d29?q=80&w=1000&auto=format&fit=crop"   # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            ]
            image_url = fallback_images[hash(theme) % len(fallback_images)]
            logger.warning(f"Using fallback image URL: {image_url}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ HEAD-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
        try:
            response = requests.head(image_url, timeout=5)
            if response.status_code != 200:
                raise Exception(f"Image URL returned status code {response.status_code}")
        except Exception as img_error:
            logger.error(f"Error checking image URL: {img_error}")
            # –ï—Å–ª–∏ URL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–∞–¥–µ–∂–Ω—ã–π –∑–∞–ø–∞—Å–Ω–æ–π URL
            image_url = "https://images.unsplash.com/photo-1535320903710-d993d3d77d29?q=80&w=1000&auto=format&fit=crop"
            logger.warning(f"Using emergency fallback image URL after check failed")
        
        # Send message to Telegram
        success, result = send_telegram_message(text, image_url)
        
        # Calculate processing time
        processing_time = f"{time.time() - start_time:.2f}s"
        
        # Save post to database
        try:
            # Create a snippet for display
            text_snippet = text[:200] + "..." if text and len(text) > 200 else text
            
            # Create new post record
            post = Post(
                theme=theme,
                text_snippet=text_snippet,
                full_text=text,
                image_url=image_url,
                success=success,
                message_id=result if success else None,
                error=result if not success else None,
                processing_time=processing_time
            )
            
            # Add to database
            db.session.add(post)
            db.session.commit()
            
            # Add to in-memory cache
            post_dict = post.to_dict()
            post_history.insert(0, post_dict)
            
            # Keep only last 100 posts in memory
            if len(post_history) > 100:
                post_history.pop()
                
            logger.info(f"Post saved to database with ID: {post.id}")
            
        except Exception as db_error:
            logger.error(f"Error saving post to database: {db_error}")
            error = f"Database error: {str(db_error)}"
            
        return success, text, image_url, result
        
    except Exception as e:
        logger.error(f"Error in create_and_send_post: {e}")
        error_message = format_error_for_display(e)
        
        # Try to save error to database
        try:
            processing_time = f"{time.time() - start_time:.2f}s"
            
            post = Post(
                theme=theme,
                text_snippet=text[:200] + "..." if text and len(text) > 200 else text,
                full_text=text,
                image_url=image_url,
                success=False,
                error=error_message,
                processing_time=processing_time
            )
            
            db.session.add(post)
            db.session.commit()
            
            post_dict = post.to_dict()
            post_history.insert(0, post_dict)
            
            if len(post_history) > 100:
                post_history.pop()
                
        except Exception as db_error:
            logger.error(f"Error saving error to database: {db_error}")
            
        return False, text, image_url, error_message

def get_post_history(limit=20):
    """Return post history from database
    Returns the most recent posts from the database, or in-memory history as fallback
    """
    try:
        # Try to get posts from database
        posts = Post.query.order_by(Post.timestamp.desc()).limit(limit).all()
        
        if posts:
            return [post.to_dict() for post in posts]
        
        # If no posts in database, use in-memory history
        return post_history[:limit] if post_history else []
        
    except Exception as e:
        logger.error(f"Error getting post history: {e}")
        # Fallback to in-memory history on database error
        return post_history[:limit] if post_history else []

def get_random_topic(emotion=None):
    """Get a random topic for post generation that wasn't used recently
    
    Args:
        emotion (str, optional): –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º—ã
    """
    try:
        # Load custom topics if they exist
        custom_topics = []
        try:
            if os.path.exists('custom_topics.txt'):
                with open('custom_topics.txt', 'r', encoding='utf-8') as f:
                    custom_topics = [line.strip() for line in f.readlines() if line.strip()]
        except Exception as e:
            logger.error(f"Error loading custom topics: {e}")
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Ç–µ–º—ã –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if emotion:
            # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–µ–º
            emotion_topic_map = {
                "motivational": "–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ",
                "educational": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
                "analytical": "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
                "cautionary": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏"
            }
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –±–µ—Ä–µ–º –∏–∑ –Ω–µ—ë —Ç–µ–º—ã
            category = emotion_topic_map.get(emotion)
            if category and category in EMOTIONAL_TOPICS_BY_CATEGORY:
                category_topics = EMOTIONAL_TOPICS_BY_CATEGORY[category]
                thematic_topics = category_topics
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã
                thematic_topics = TRADING_TOPICS
        else:
            # –ï—Å–ª–∏ —ç–º–æ—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã
            thematic_topics = TRADING_TOPICS
        
        # Combine built-in and custom topics
        all_topics = thematic_topics + custom_topics
        
        # Get recent post themes to avoid repetition
        recent_posts = get_post_history(10)
        recent_themes = [post.get('theme') for post in recent_posts if post.get('theme')]
        
        # Filter out recently used topics
        available_topics = [topic for topic in all_topics if topic not in recent_themes]
        
        # If all topics were used recently, use the full list
        if not available_topics:
            available_topics = all_topics
        
        # Select a random topic
        selected_topic = random.choice(available_topics)
        logger.info(f"Selected random topic: {selected_topic}")
        
        return selected_topic
    
    except Exception as e:
        logger.error(f"Error getting random topic: {e}")
        # Fallback to simple random choice from built-in topics
        return random.choice(TRADING_TOPICS)
        
def analyze_post_performance(post_id=None, days=30):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    
    Args:
        post_id (int, optional): ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        days (int, optional): –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–Ω—è—Ö
        
    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤
    """
    try:
        if post_id:
            # –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
            try:
                post = Post.query.filter_by(id=post_id).first()
                if not post:
                    return {"error": f"–ü–æ—Å—Ç —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                
                return {
                    "post_id": post.id,
                    "theme": post.theme,
                    "timestamp": post.timestamp.isoformat(),
                    "success": post.success,
                    "processing_time": post.processing_time,
                    "text_length": len(post.full_text) if post.full_text else 0
                }
            except Exception as e:
                logger.error(f"Error analyzing post {post_id}: {e}")
                return {"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç–∞: {str(e)}"}
        else:
            # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            cutoff_date = datetime.datetime.now() - datetime.timedelta(days=days)
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
                posts = Post.query.filter(Post.timestamp >= cutoff_date).all()
                
                if not posts:
                    return {"error": f"–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π"}
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_posts = len(posts)
                successful_posts = sum(1 for p in posts if p.success)
                failed_posts = total_posts - successful_posts
                
                # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
                text_lengths = [len(p.full_text) if p.full_text else 0 for p in posts]
                avg_text_length = sum(text_lengths) / len(text_lengths) if text_lengths else 0
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ–º—ã
                themes = {}
                for post in posts:
                    if post.theme:
                        themes[post.theme] = themes.get(post.theme, 0) + 1
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã
                popular_themes = sorted(themes.items(), key=lambda x: x[1], reverse=True)[:5]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                processing_times = []
                for post in posts:
                    if post.processing_time:
                        try:
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "X.XXs"
                            time_str = post.processing_time.replace("s", "")
                            processing_times.append(float(time_str))
                        except:
                            pass
                
                avg_processing_time = sum(processing_times) / len(processing_times) if processing_times else 0
                
                return {
                    "period_days": days,
                    "total_posts": total_posts,
                    "successful_posts": successful_posts,
                    "failed_posts": failed_posts,
                    "success_rate": f"{(successful_posts / total_posts * 100):.1f}%" if total_posts > 0 else "0%",
                    "avg_text_length": f"{avg_text_length:.1f} —Å–∏–º–≤–æ–ª–æ–≤",
                    "avg_processing_time": f"{avg_processing_time:.2f} —Å–µ–∫.",
                    "popular_themes": popular_themes,
                    "posts_per_day": f"{total_posts / days:.1f}"
                }
                
            except Exception as e:
                logger.error(f"Error analyzing posts: {e}")
                return {"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç–æ–≤: {str(e)}"}
                
    except Exception as e:
        logger.error(f"Error in analyze_post_performance: {e}")
        return {"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"}

def generate_post_summary(theme, emotion="motivational"):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é –≤–µ—Ä—Å–∏—é –ø–æ—Å—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    
    Args:
        theme (str): –¢–µ–º–∞ –ø–æ—Å—Ç–∞
        emotion (str, optional): –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
        
    Returns:
        dict: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—Å—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é –≤–µ—Ä—Å–∏—é —Ç–µ–∫—Å—Ç–∞
        prompt = f"–¢–µ–º–∞: {theme} (—Ç–æ–Ω: {emotion})"
        text = generate_post_text(theme, emotion)
        
        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = get_image_url_by_theme(theme, emotion)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            "theme": theme,
            "emotion": emotion,
            "text": text,
            "text_preview": text[:100] + "..." if len(text) > 100 else text,
            "image_url": image_url,
            "timestamp": datetime.datetime.now().isoformat()
        }
    
    except Exception as e:
        logger.error(f"Error generating post summary: {e}")
        return {
            "theme": theme,
            "emotion": emotion,
            "error": format_error_for_display(e),
            "timestamp": datetime.datetime.now().isoformat()
        }

def check_image_url(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        url (str): URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        if not url or not url.startswith(('http://', 'https://')):
            return False
            
        response = requests.head(url, timeout=5)
        return response.status_code == 200
    except Exception as e:
        logger.error(f"Error checking image URL {url}: {e}")
        return False