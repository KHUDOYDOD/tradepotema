import os
import requests
import logging
import time
import datetime
import pytz
import random
from utils import format_error_for_display
from models import Post
from app import db

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Environment configuration
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç CHANNEL_ID
_channel_id = os.environ.get('CHANNEL_ID', '@tradepotrest')
# –£–¥–∞–ª—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
import re
_channel_id = re.sub(r'[^a-zA-Z0-9_@]', '', _channel_id)
# –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –Ω–∞—á–∞–ª–µ
if _channel_id and not _channel_id.startswith('@'):
    _channel_id = '@' + _channel_id
CHANNEL_ID = _channel_id
OPENROUTER_API_KEY = os.environ.get('OPENROUTER_API_KEY')

# Constants
MAX_RETRIES = 3
RETRY_DELAY = 5  # seconds
TIMEZONE = pytz.timezone('Asia/Dushanbe')

# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —ç—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
post_history = []

# Trading topic suggestions
TRADING_TOPICS = [
    "üî• –°–µ–∫—Ä–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –Ω–∞ –≤–∞–ª—é—Ç–Ω–æ–º —Ä—ã–Ω–∫–µ: –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –∏ –≤—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å",
    "üìà –°–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥ –Ω–∞ —Ñ–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ: –∫–∞–∫ –ø–æ–π–º–∞—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏",
    "üí∞ –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –¥–∏–≤–∏–¥–µ–Ω–¥–Ω—ã–µ –∞–∫—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é",
    "üöÄ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è: –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª–µ Bitcoin –∏ –∞–ª—å—Ç–∫–æ–∏–Ω–∞–º–∏ –≤ 2025 –≥–æ–¥—É",
    "üìä –ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: –∫–∞–∫ –±–µ–∑–æ—à–∏–±–æ—á–Ω–æ —á–∏—Ç–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è —Ä—ã–Ω–∫–∞",
    "‚ö†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏: –∫–ª—é—á–µ–≤–æ–π —Ñ–∞–∫—Ç–æ—Ä –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —É—Å–ø–µ—Ö–∞ –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö",
    "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: –∫–∞–∫ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å —Å—Ç—Ä–∞—Ö –∏ –∂–∞–¥–Ω–æ—Å—Ç—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏",
    "üîç –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –∏—Å–∫—É—Å—Å—Ç–≤–æ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –∏ –∞–∫—Ç–∏–≤–æ–≤ –ø–µ—Ä–µ–¥ —Ä–æ—Å—Ç–æ–º",
    "‚ö° –¢–æ—Ä–≥–æ–≤–ª—è —Ñ—å—é—á–µ—Ä—Å–∞–º–∏: —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º –ª–µ–≤–µ—Ä–∏–¥–∂–µ–º –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤",
    "üõ°Ô∏è –û–ø—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: –∫–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å —Å–≤–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥",
    "üíé –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±–∏—Ç–∫–æ–∏–Ω: –æ—Ç –ø–æ–∫—É–ø–∫–∏ –¥–æ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –∏ DeFi",
    "üîÆ –¢–æ–ø-10 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä",
    "üè¢ –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏",
    "üß© –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É",
    "üõ¢Ô∏è –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Å—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã: –∫–∞–∫ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ –∑–∞—â–∏—Ç–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª –æ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏",
    "üíº –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è: –∞–∫—Ü–∏–∏, –æ–±–ª–∏–≥–∞—Ü–∏–∏, ETF –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤—ã",
    "üì± –ú–æ–±–∏–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥: –ª—É—á—à–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ª—é–±–æ–π —Ç–æ—á–∫–µ –º–∏—Ä–∞",
    "üò± –°–∞–º—ã–µ –æ–ø–∞—Å–Ω—ã–µ –æ—à–∏–±–∫–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –∏ –∫–∞–∫ –∏—Ö –∏–∑–±–µ–∂–∞—Ç—å: —á–µ—Å—Ç–Ω—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ —Ä–∏—Å–∫–∏",
    "ü§ñ –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤: –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤–∞—à–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
    "üí™ –û—Ç –Ω–æ–≤–∏—á–∫–∞ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—É: –∏—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—Ö–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª $1000 –≤ –º–∏–ª–ª–∏–æ–Ω",
    "üåä –¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: –∫–∞–∫ –∏–∑–≤–ª–µ—á—å –ø—Ä–∏–±—ã–ª—å –≤ –ø–µ—Ä–∏–æ–¥—ã –ø–∞–Ω–∏–∫–∏ –∏ —ç–π—Ñ–æ—Ä–∏–∏ –Ω–∞ —Ä—ã–Ω–∫–µ",
    "üì∞ –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π",
    "üîã –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∫—Ç–æ—Ä: –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—É—é –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É",
    "üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å–µ–∫—Ç–æ—Ä: –∞–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞",
    "üßò‚Äç‚ôÇÔ∏è –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞: –∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç—Ä–µ—Å—Å–æ–º –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"
]

def generate_post_text(prompt=None):
    """Generate text content using OpenRouter's GPT-4"""
    try:
        if not OPENROUTER_API_KEY:
            logger.error("OpenRouter API key is not set")
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–µ–∫—Å—Ç, –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç —Ç–µ–º—ã
            fallback_texts = [
                "üöÄ –¢—Ä–µ–π–¥–∏–Ω–≥ - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ –±–∞–ª–∞–Ω—Å–∞ –∏ —Ç–µ—Ä–ø–µ–Ω–∏—è! –ö–∞–∂–¥–∞—è —Å–¥–µ–ª–∫–∞ —É—á–∏—Ç –Ω–∞—Å —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É. –ü–æ–º–Ω–∏—Ç–µ: –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ. #—Ç—Ä–µ–π–¥–∏–Ω–≥ #–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ #tradepo",
                "üíπ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä—ã–Ω–∫–∏ –Ω–µ –ø—Ä–æ—â–∞—é—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –£—Å–ø–µ—à–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä - —ç—Ç–æ —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω—ã–π —Å—Ç—Ä–∞—Ç–µ–≥ —Å —á–µ—Ç–∫–∏–º –ø–ª–∞–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–π! #–±–∏—Ä–∂–∞ #–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ #tradepo",
                "üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ - –≤–∞—à –ª—É—á—à–∏–π –¥—Ä—É–≥ –Ω–∞ —Ä—ã–Ω–∫–µ! –£—á–∏—Ç–µ—Å—å —á–∏—Ç–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–¥–µ—Ç—å —Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ —É–ø—É—Å–∫–∞—é—Ç –∏–∑ –≤–∏–¥—É. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! #—Ç—Ä–µ–π–¥–∏–Ω–≥ #–≥—Ä–∞—Ñ–∏–∫–∏ #tradepo",
                "üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø—Ä–µ–∂–¥–µ, —á–µ–º –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏. –°–∞–º–æ–µ –≤—ã–≥–æ–¥–Ω–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ - –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ! #–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ #—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ #tradepo",
                "‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –Ω–µ –≤—Ä–∞–≥, –∞ –¥—Ä—É–≥ —Ç—Ä–µ–π–¥–µ—Ä–∞! –ò–º–µ–Ω–Ω–æ –≤ –ø–µ—Ä–∏–æ–¥—ã –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–æ–∂–¥–∞—é—Ç—Å—è —Å–∞–º—ã–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã! #—Ç—Ä–µ–π–¥–∏–Ω–≥ #–ø—Ä–∏–±—ã–ª—å #tradepo",
                "üî• –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ —Å—Ç—Ä–æ–≥–æ–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ - –¥–≤–∞ —Å—Ç–æ–ª–ø–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞. –ë–µ–∑ –Ω–∏—Ö –¥–∞–∂–µ –ª—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±—Ä–µ—á–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–∞–ª! #—Ç—Ä–µ–π–¥–∏–Ω–≥ #—Ä–∏—Å–∫–∏ #tradepo"
            ]
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–º–ø—Ç–∞
            if prompt:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
                index = sum(ord(c) for c in prompt) % len(fallback_texts)
                return fallback_texts[index]
            else:
                return random.choice(fallback_texts)
            
        headers = {
            "HTTP-Referer": "https://replit.com",  # –î–æ–±–∞–≤–ª—è–µ–º referer –¥–ª—è OpenRouter
            "X-Title": "TRADEPO Bot",
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }
        
        # –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–æ–º–ø—Ç, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –±–æ–ª–µ–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º
        user_prompt = prompt
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –∑–∞–ø—Ä–æ—Å—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        current_time = datetime.datetime.now()
        content_request = f"–ù–∞–ø–∏—à–∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–æ—Å—Ç –æ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ –Ω–∞ —Ç–µ–º—É: {user_prompt}"
        content_request += "\n\n–î–æ–±–∞–≤—å –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å —Å —ç–º–æ–¥–∂–∏."
        content_request += "\n\n–í–∫–ª—é—á–∏ —Ö—ç—à—Ç–µ–≥–∏ #—Ç—Ä–µ–π–¥–∏–Ω–≥ #–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ #—Ñ–∏–Ω–∞–Ω—Å—ã #tradepo –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞."
        content_request += f"\n\n–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–µ –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ—Å—Ç—ã. –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_time.strftime('%d.%m.%Y')}."
            
        data = {
            "model": "anthropic/claude-3-haiku",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
            "messages": [
                {"role": "system", "content": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –¢–≤–æ–π —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞ - –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π. –°–æ–∑–¥–∞–≤–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç."},
                {"role": "user", "content": content_request}
            ],
            "max_tokens": 250,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            "temperature": 0.9  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        }
        
        for attempt in range(MAX_RETRIES):
            try:
                logger.info(f"Generating text, attempt {attempt+1}")
                response = requests.post(
                    "https://openrouter.ai/api/v1/chat/completions", 
                    headers=headers, 
                    json=data,
                    timeout=30
                )
                response.raise_for_status()
                
                # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
                response_data = response.json()
                logger.debug(f"API response: {response_data}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
                if 'choices' in response_data and len(response_data['choices']) > 0:
                    if 'message' in response_data['choices'][0] and 'content' in response_data['choices'][0]['message']:
                        text = response_data['choices'][0]['message']['content']
                    else:
                        # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
                        logger.warning("Unexpected response structure (no message/content)")
                        if 'text' in response_data:
                            text = response_data['text']
                        else:
                            raise KeyError("No recognizable text content in response")
                elif 'error' in response_data:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API
                    error_message = response_data.get('error', {}).get('message', 'Unknown API error')
                    logger.error(f"API error: {error_message}")
                    raise KeyError(f"API error: {error_message}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ choices, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                    logger.warning("No 'choices' field in response, trying fallback extraction")
                    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
                    if 'output' in response_data:
                        text = response_data['output']
                    elif 'generated_text' in response_data:
                        text = response_data['generated_text']
                    else:
                        raise KeyError("Cannot extract text from response")
                logger.info(f"Text generated successfully: {text[:50]}...")
                return text
            except (requests.RequestException, KeyError) as e:
                error_msg = format_error_for_display(e)
                if attempt < MAX_RETRIES - 1:
                    logger.warning(f"Text generation attempt {attempt+1} failed: {error_msg}. Retrying...")
                    time.sleep(RETRY_DELAY)
                else:
                    logger.error(f"All text generation attempts failed: {error_msg}")
                    raise
    except Exception as e:
        error_msg = format_error_for_display(e)
        logger.error(f"Failed to generate text: {error_msg}")
        # Return fallback text
        return "–¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É —Ä–∏—Å–∫–æ–º –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é. #tradepo"

def generate_image_description(text):
    """Generate an image description based on the post text"""
    try:
        if not OPENROUTER_API_KEY:
            logger.error("OpenRouter API key is not set")
            return "Trading chart with financial data on a dark blue background"
            
        headers = {
            "HTTP-Referer": "https://replit.com",  # –î–æ–±–∞–≤–ª—è–µ–º referer –¥–ª—è OpenRouter
            "X-Title": "TRADEPO Bot",
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        input_text = text
        if input_text and len(input_text) > 40:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ
            input_text = input_text[:40] + "..."
            
        data = {
            "model": "anthropic/claude-3-haiku",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
            "messages": [
                {"role": "system", "content": "–û–ø–∏—à–∏ —è—Ä–∫—É—é, –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –ø–æ—Å—Ç–∞ –æ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ. –î–æ–±–∞–≤—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏."},
                {"role": "user", "content": input_text}
            ],
            "max_tokens": 50  # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
        }
        
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions", 
            headers=headers, 
            json=data,
            timeout=30
        )
        response.raise_for_status()
        
        # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        response_data = response.json()
        logger.debug(f"API response for image description: {response_data}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        if 'choices' in response_data and len(response_data['choices']) > 0:
            if 'message' in response_data['choices'][0] and 'content' in response_data['choices'][0]['message']:
                description = response_data['choices'][0]['message']['content']
            else:
                # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
                logger.warning("Unexpected response structure for image description (no message/content)")
                if 'text' in response_data:
                    description = response_data['text']
                else:
                    raise KeyError("No recognizable text content in image description response")
        elif 'error' in response_data:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API
            error_message = response_data.get('error', {}).get('message', 'Unknown API error')
            logger.error(f"API error in image description: {error_message}")
            raise KeyError(f"API error: {error_message}")
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ choices, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            logger.warning("No 'choices' field in image description response, trying fallback extraction")
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
            if 'output' in response_data:
                description = response_data['output']
            elif 'generated_text' in response_data:
                description = response_data['generated_text']
            else:
                raise KeyError("Cannot extract text from image description response")
        logger.info(f"Image description generated: {description}")
        return description
    except Exception as e:
        error_msg = format_error_for_display(e)
        logger.error(f"Failed to generate image description: {error_msg}")
        return "Professional trading chart with financial data visualization in dark theme"

def generate_image(text):
    """Generate image using Unsplash service"""
    try:
        # First generate a suitable description for the image based on the text
        image_description = generate_image_description(text)
        
        # Extract keywords from the description
        keywords = image_description.lower()
        
        # Replace common words with financial/trading terms to get better results
        if "chart" not in keywords:
            keywords += " chart"
        if "trading" not in keywords:
            keywords += " trading"
        
        # Clean up keywords - remove special characters, –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏ –∫–∞–≤—ã—á–∫–∏
        import re
        # –ó–∞–º–µ–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏ –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
        replacements = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'i', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
            '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'E',
            '–ñ': 'ZH', '–ó': 'Z', '–ò': 'I', '–ô': 'I', '–ö': 'K', '–õ': 'L', '–ú': 'M',
            '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
            '–§': 'F', '–•': 'H', '–¶': 'TS', '–ß': 'CH', '–®': 'SH', '–©': 'SCH',
            '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'YU', '–Ø': 'YA'
        }
        
        for cyr, lat in replacements.items():
            keywords = keywords.replace(cyr, lat)
            
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        keywords = re.sub(r'[^a-zA-Z0-9\s]', ' ', keywords)
        keywords = " ".join(keywords.split()) # remove extra spaces
        
        # Select top keywords (max 4) to avoid too long URLs
        keywords_list = keywords.split()
        selected_keywords = []
        
        for keyword in keywords_list:
            if len(selected_keywords) < 4 and len(keyword) > 2:
                selected_keywords.append(keyword)
        
        if len(selected_keywords) == 0:
            # Use default keywords if none were extracted
            selected_keywords = ["trading", "finance", "chart"]
        
        search_term = "+".join(selected_keywords)
        
        # Try to get a relevant image from Unsplash
        try:
            # Use Unsplash source for simple image requests
            logger.info(f"Fetching image for keywords: {search_term}")
            
            # First try specific resolution
            unsplash_url = f"https://source.unsplash.com/1200x800/?{search_term}"
            
            # Make request to Unsplash
            response = requests.get(unsplash_url, allow_redirects=True, timeout=10)
            
            if response.status_code == 200:
                # Unsplash returned an image, return the final URL (after redirects)
                image_url = response.url
                logger.info(f"Image obtained successfully: {image_url}")
                return image_url
            else:
                logger.warning(f"Failed to get image from Unsplash: {response.status_code}")
                # Fallback to static image
                return get_fallback_image_url()
        except Exception as e:
            error_msg = format_error_for_display(e)
            logger.error(f"Error getting image from Unsplash: {error_msg}")
            return get_fallback_image_url()
    except Exception as e:
        error_msg = format_error_for_display(e)
        logger.error(f"Failed to generate image: {error_msg}")
        return get_fallback_image_url()

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
_last_images_used = []
_MAX_HISTORY = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö URL –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

def get_fallback_image_url(prompt=None):
    """Get a fallback image URL in case external services fail
    
    Args:
        prompt (str, optional): –¢–µ–∫—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞ –ø–æ—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
                               –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã –ø–æ–ª—É—á–∞–ª–∏ —Ä–∞–∑–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    
    Returns:
        str: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    global _last_images_used
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        custom_images = []
        if os.path.exists('image_urls.txt'):
            with open('image_urls.txt', 'r', encoding='utf-8') as f:
                custom_images = [line.strip() for line in f.readlines() if line.strip()]
                
        # –ó–∞–ø–∞—Å–Ω–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç
        fallback_images = [
            "https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&h=800&q=80",
            "https://images.unsplash.com/photo-1611784728558-6a7645e72da1?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&h=800&q=80",
            "https://images.unsplash.com/photo-1640340434855-6084b1f4901c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&h=800&q=80",
            "https://images.unsplash.com/photo-1642790551116-3ef6f3f2e184?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&h=800&q=80",
            "https://images.unsplash.com/photo-1535320903710-d993d3d77d29?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&h=800&q=80",
            "https://i.imgur.com/zjjcJKZ.png",
            "https://images.unsplash.com/photo-1590283603385-17ffb3a7f29f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&h=800&q=80",
            "https://images.unsplash.com/photo-1569025690938-a00729c9e1f9?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&h=800&q=80",
            "https://images.unsplash.com/photo-1559526324-4b87b5e36e44?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&h=800&q=80"
        ]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        all_images = custom_images if custom_images else fallback_images
        available_count = len(all_images)
        
        if available_count == 0:
            logger.error("No images available")
            return "https://via.placeholder.com/1200x800?text=No+Images+Available"
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if prompt and len(all_images) > 1:
            # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã –¥–ª—è —Å–≤—è–∑–∏ —Ç–µ–º—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            # (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ç–µ–º—ã –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ä–∞–∑–Ω—ã–µ - —Ä–∞–∑–Ω—ã–µ)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã
            hash_value = sum(ord(c) for c in prompt)
            index = hash_value % len(all_images)
            selected_image = all_images[index]
            
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å, –≤—ã–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–æ–µ
            attempts = 0
            while selected_image in _last_images_used and attempts < 3 and len(all_images) > len(_last_images_used):
                index = (index + 1) % len(all_images)
                selected_image = all_images[index]
                attempts += 1
                
            logger.info(f"Selected image based on prompt (index: {index} of {len(all_images)})")
        else:
            # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä, –∏—Å–∫–ª—é—á–∞—è –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            available_images = [img for img in all_images if img not in _last_images_used]
            
            # –ï—Å–ª–∏ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –Ω–µ–¥–∞–≤–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if not available_images and len(all_images) > 1:
                available_images = all_images
                _last_images_used = []
                
            selected_image = random.choice(available_images)
            logger.info(f"Randomly selected image (available: {len(available_images)} of {len(all_images)})")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        _last_images_used.append(selected_image)
        if len(_last_images_used) > _MAX_HISTORY:
            _last_images_used.pop(0)  # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            
        logger.info(f"Using image {'from custom list' if custom_images else 'from fallback list'} ({available_count} available)")
        return selected_image
        
    except Exception as e:
        error_msg = format_error_for_display(e)
        logger.error(f"Error selecting image: {error_msg}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return "https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&h=800&q=80"

def send_to_telegram(image_url, caption):
    """Send post to Telegram channel"""
    if not TELEGRAM_TOKEN:
        logger.error("Telegram token is not set")
        return False, "–¢–æ–∫–µ–Ω Telegram API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
    if not CHANNEL_ID:
        logger.error("Channel ID is not set")
        return False, "ID –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç - –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±
        telegram_text_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        text_payload = {
            'chat_id': CHANNEL_ID,
            'text': caption,
            'parse_mode': 'HTML'
        }
        
        for attempt in range(MAX_RETRIES):
            try:
                response = requests.post(telegram_text_url, data=text_payload, timeout=30)
                response.raise_for_status()
                # Get message_id for reference
                message_id = response.json().get('result', {}).get('message_id')
                logger.info(f"Text message sent to Telegram with ID: {message_id}")
                
                # –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
                if image_url and image_url.startswith(('http://', 'https://')):
                    try:
                        media_payload = {
                            'chat_id': CHANNEL_ID,
                            'photo': image_url
                        }
                        media_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
                        media_response = requests.post(media_url, data=media_payload, timeout=30)
                        
                        if media_response.status_code == 200:
                            logger.info("Image sent to Telegram successfully")
                        else:
                            logger.warning(f"Failed to send image, but text was sent. Status: {media_response.status_code}")
                    except Exception as img_e:
                        logger.warning(f"Failed to send image, but text was sent. Error: {img_e}")
                
                return True, message_id
            except requests.RequestException as e:
                error_msg = format_error_for_display(e)
                if attempt < MAX_RETRIES - 1:
                    logger.warning(f"Telegram send attempt {attempt+1} failed: {error_msg}. Retrying...")
                    time.sleep(RETRY_DELAY)
                else:
                    logger.error(f"All Telegram send attempts failed: {error_msg}")
                    raise
    except Exception as e:
        error_msg = format_error_for_display(e)
        logger.error(f"Failed to send to Telegram: {error_msg}")
        return False, error_msg

def create_and_send_post(theme=None):
    """Create and send a post to the Telegram channel"""
    start_time = time.time()
    
    try:
        logger.info(f"Creating post with theme: {theme}")
        
        # Record for database
        post_record = Post(
            theme=theme,
            timestamp=datetime.datetime.now(TIMEZONE)
        )
        
        # Generate text content based on theme
        text = generate_post_text(theme)
        logger.info(f"Generated text: {text[:100]}...")
        
        # Update post record with text snippet (first 200 chars)
        post_record.text_snippet = text[:200] + ('...' if len(text) > 200 else '')
        post_record.full_text = text
        
        # Generate image URL
        image_url = generate_image(text)
        logger.info(f"Generated image URL: {image_url}")
        post_record.image_url = image_url
        
        # Send to Telegram
        success, result = send_to_telegram(image_url, text)
        
        # Update post record
        post_record.success = success
        post_record.message_id = result if success else None
        post_record.error = None if success else result
        
        # Calculate processing time
        elapsed_time = time.time() - start_time
        processing_time = f"{elapsed_time:.2f}s"
        post_record.processing_time = processing_time
        
        # Save to database
        try:
            from app import db
            with db.session.begin():
                db.session.add(post_record)
                logger.info(f"Post saved to database with ID: {post_record.id}")
        except Exception as db_error:
            logger.error(f"Error saving post to database: {db_error}")
            # Still continue to return the result even if DB save failed
            # Also add to in-memory history as fallback
            post_history.append(post_record)
            
        logger.info(f"Post created and sent: success={success}, processing_time={processing_time}")
        
        return success, text, image_url, result
    except Exception as e:
        error_msg = format_error_for_display(e)
        logger.error(f"Error creating and sending post: {error_msg}")
        
        # Create failed post record for tracking
        try:
            failed_post = Post(
                theme=theme,
                timestamp=datetime.datetime.now(TIMEZONE),
                text_snippet="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                full_text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_msg}",
                success=False,
                error=error_msg,
                processing_time=f"{time.time() - start_time:.2f}s"
            )
            
            # Try to save to database
            try:
                from app import db
                with db.session.begin():
                    db.session.add(failed_post)
            except Exception as db_error:
                logger.error(f"Error saving failed post to database: {db_error}")
                # Add to in-memory history as fallback
                post_history.append(failed_post)
        except Exception as record_error:
            logger.error(f"Error creating failure record: {record_error}")
        
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞", None, error_msg

_used_topics = []
_max_topic_history = 10

def get_random_topic():
    """Get a random topic for post generation that wasn't used recently"""
    global _used_topics
    
    available_topics = [t for t in TRADING_TOPICS if t not in _used_topics]
    if not available_topics:
        # If all topics were used, reset history
        _used_topics = []
        available_topics = TRADING_TOPICS
        
    topic = random.choice(available_topics)
    _used_topics.append(topic)
    
    # Keep only recent history
    if len(_used_topics) > _max_topic_history:
        _used_topics.pop(0)
        
    return topic

def get_post_history():
    """Return the post history from database
    Returns the most recent posts from the database, or in-memory history as fallback
    """
    try:
        # Query posts from the database
        from app import db
        posts = db.session.query(Post).order_by(Post.timestamp.desc()).limit(20).all()
        
        # Convert to dictionary for easier handling in templates
        post_dicts = [post.to_dict() for post in posts]
        
        logger.info(f"Retrieved {len(post_dicts)} posts from database")
        return post_dicts
    except Exception as e:
        logger.error(f"Error getting post history from database: {e}")
        # Fallback to in-memory history
        logger.info(f"Using in-memory post history as fallback ({len(post_history)} posts)")
        return [post.to_dict() if hasattr(post, 'to_dict') else post for post in post_history]